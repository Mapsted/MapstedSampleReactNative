/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTFeature.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTFeatureCollection.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTGeometry.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTProjection.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * A GeoJSON writer. Generates human-readable GeoJSON representation of the geometry, feature or feature collection.
 * Supports both 2D and 3D coordinate serialization.
 */
__attribute__ ((visibility("default"))) @interface NTGeoJSONGeometryWriter : NSObject
{
	/** @internal:nodoc: */
	void *swigCPtr;
	/** @internal:nodoc: */
	BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * Constructs a new GeoJSONGeometryWriter object with default settings.
 */
-(id)init;
/**
 * Returns the current source projection. If source projection is set, all geometry
 * coordinates will be converted from given coordinate system to WGS84.
 * @return The current source projection or null.
 */
-(NTProjection*)getSourceProjection;
/**
 * Sets the current source projection. If source projection is set, all geometry
 * coordinates will be converted from given coordinate system to WGS84.
 * @param proj The new source projection or null.
 */
-(void)setSourceProjection: (NTProjection*)proj;
/**
 * Returns the state of Z coordinate serialization.
 * @return True if Z coordinate is stored in GeoJSON output, false otherwise. The default is false.
 */
-(BOOL)getZ;
/**
 * Sets the state of Z coordinate serialization.
 * @param z True when Z coordinate should be serialized, false otherwise.
 */
-(void)setZ: (BOOL)z;
/**
 * Creates a GeoJSON string corresponding to the specified geometry.
 * @param geometry The geometry to write.
 * @return The corresponding GeoJSON string.
 * @throws NSException If string could not be generated.
 */
-(NSString*)writeGeometry: (NTGeometry*)geometry;
/**
 * Creates a GeoJSON string corresponding to the specified feature.
 * @param feature The feature to write.
 * @return The corresponding GeoJSON string.
 * @throws NSException If string could not be generated.
 */
-(NSString*)writeFeature: (NTFeature*)feature;
/**
 * Creates a GeoJSON string corresponding to the specified feature collection.
 * @param featureCollection The feature collection to write.
 * @return The corresponding GeoJSON string.
 * @throws NSException If string could not be generated.
 */
-(NSString*)writeFeatureCollection: (NTFeatureCollection*)featureCollection;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

