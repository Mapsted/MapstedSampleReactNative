/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTMapBounds.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTVectorData.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTProjection.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTCullState.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTViewState.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * Abstract base class for envelope based vector data sources. It provides default implementation
 * for listener registration and other common data source methods.
 * Subclasses need to define their own implementations of loadElements method.
 * 
 * The draw order of vector elements within the data source is undefined.
 */
__attribute__ ((visibility("default"))) @interface NTVectorDataSource : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTVectorDataSource*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Returns the extent of the data of this data source.
 * The bounds are in coordinate system of the projection of the data source.
 * @return The extent of the data source.
 */
-(NTMapBounds*)getDataExtent;
/**
 * Returns the extent of the data of this data source.
 * The bounds are in coordinate system of the projection of the data source.
 * @return The extent of the data source.
 */
-(NTMapBounds*)getDataExtentSwigExplicitNTVectorDataSource;
/**
 * Returns the projection used by this data source.
 * @return The projection used by this data source.
 */
-(NTProjection*)getProjection;
/**
 * Loads all the elements within the defined envelope.
 * @param cullState State for describing view parameters and conservative view envelope.
 * @return The vector of loaded vector elements. If no elements are available, null may be returned.
 */
-(NTVectorData*)loadElements: (NTCullState*)cullState;
/**
 * Notifies listeners that all vector elements have changed. This method refreshes all the existing 
 * vector elements in the data source.
 */
-(void)notifyElementsChanged;
/**
 * Constructs an abstract VectorDataSource object.
 * @param projection The projection used by this data source.
 */
-(id)initWithProjection: (NTProjection*)projection;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

