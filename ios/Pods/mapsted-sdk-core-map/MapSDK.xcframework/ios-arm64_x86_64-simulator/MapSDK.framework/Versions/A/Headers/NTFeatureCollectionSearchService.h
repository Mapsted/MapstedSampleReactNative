/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTSearchRequest.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTFeatureCollection.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTProjection.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * A search service for finding features from a specified feature collection.
 */
__attribute__ ((visibility("default"))) @interface NTFeatureCollectionSearchService : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTFeatureCollectionSearchService*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a FeatureCollectionSearchService for given feature collection.
 * @param projection The projection to use for the feature collection.
 * @param featureCollection The feature collection to search from.
 */
-(id)initWithProjection: (NTProjection*)projection featureCollection: (NTFeatureCollection*)featureCollection;
/**
 * Returns the projection of the feature collection of the search service.
 * @return The projection of the feature collection of the search service.
 */
-(NTProjection*)getProjection;
/**
 * Returns the feature collection of the search service.
 * @return The feature collection of the search service.
 */
-(NTFeatureCollection*)getFeatureCollection;
/**
 * Returns the maximum number of results the search service returns.
 * @return The maximum number of results the search service returns.
 */
-(int)getMaxResults;
/**
 * Sets the maximum number of results the search service returns.
 * The default number of results is 1000.
 * @param maxResults The new maximum number of results the geocoding service returns.
 */
-(void)setMaxResults: (int)maxResults;
/**
 * Searches for the features specified by search request from the feature collection bound to the service.
 * @param request The search request containing search filters.
 * @return The resulting feature collection containing features matching the request.
 */
-(NTFeatureCollection*)findFeatures: (NTSearchRequest*)request;
/**
 * Searches for the features specified by search request from the feature collection bound to the service.
 * @param request The search request containing search filters.
 * @return The resulting feature collection containing features matching the request.
 */
-(NTFeatureCollection*)findFeaturesSwigExplicitNTFeatureCollectionSearchService: (NTSearchRequest*)request;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

