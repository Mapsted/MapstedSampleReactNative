/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * Routing action type.
 */
typedef NS_ENUM(NSInteger, NTRoutingAction) {
/**
 * Head on, start the route.
 */
  NT_ROUTING_ACTION_HEAD_ON,
/**
 * Finish the route.
 */
  NT_ROUTING_ACTION_FINISH,
/**
 * Continue along the given street, do not turn.
 */
  NT_ROUTING_ACTION_NO_TURN,
/**
 * Go straight.
 */
  NT_ROUTING_ACTION_GO_STRAIGHT,
/**
 * Turn right.
 */
  NT_ROUTING_ACTION_TURN_RIGHT,
/**
 * Do an u-turn.
 */
  NT_ROUTING_ACTION_UTURN,
/**
 * Turn left.
 */
  NT_ROUTING_ACTION_TURN_LEFT,
/**
 * Reached given via point. If this is the final point, FINISH action is used instead.
 */
  NT_ROUTING_ACTION_REACH_VIA_LOCATION,
/**
 * Enter roundabout. Used by Valhalla and OSRM.
 */
  NT_ROUTING_ACTION_ENTER_ROUNDABOUT,
/**
 * Leave roundabout. Used by Valhalla and OSRM.
 */
  NT_ROUTING_ACTION_LEAVE_ROUNDABOUT,
/**
 * Continue along the roundabout. Only used by OSRM.
 */
  NT_ROUTING_ACTION_STAY_ON_ROUNDABOUT,
/**
 * Start at the end of the street. Currently used only by OSRM.
 */
  NT_ROUTING_ACTION_START_AT_END_OF_STREET,
/**
 * Enter street while moving against the allowed direction. Only used by OSRM.
 */
  NT_ROUTING_ACTION_ENTER_AGAINST_ALLOWED_DIRECTION,
/**
 * Leave the street while moving aginst the allowed direction. Only used by OSRM.
 */
  NT_ROUTING_ACTION_LEAVE_AGAINST_ALLOWED_DIRECTION,
/**
 * Go up. Only used by the SGRE.
 */
  NT_ROUTING_ACTION_GO_UP,
/**
 * Go down. Only used by SGRE.
 */
  NT_ROUTING_ACTION_GO_DOWN,
/**
 * Wait. Only used by SGRE.
 */
  NT_ROUTING_ACTION_WAIT,
/**
 * Enter ferry. Only used by Valhalla.
 */
  NT_ROUTING_ACTION_ENTER_FERRY,
/**
 * Leave ferry. Only used by Valhalla.
 */
  NT_ROUTING_ACTION_LEAVE_FERRY
};


#ifdef __cplusplus
}
#endif
#import "NTMapPos.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTVariant.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * A class that defines a routing instruction at specified position in the path.
 */
__attribute__ ((visibility("default"))) @interface NTRoutingInstruction : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a new RoutingInstruction instance with all values set to default.
 */
-(id)init;
/**
 * Constructs a new RoutingInstruction instance given all instruction attributes.
 * @param action Action to take.
 * @param pointIndex Instruction starting point index in the point list.
 * @param streetName Street name.
 * @param instruction The optional instruction description.
 * @param turnAngle Turn angle in degrees.
 * @param azimuth Azimuth in degrees.
 * @param distance The distance to move along the given street in meters.
 * @param time The approximate duration of the instruction in seconds.
 * @param geometryTag The geometry tag associated with the instruction.
 */
-(id)initWithAction: (enum NTRoutingAction)action pointIndex: (int)pointIndex streetName: (NSString*)streetName instruction: (NSString*)instruction turnAngle: (float)turnAngle azimuth: (float)azimuth distance: (double)distance time: (double)time geometryTag: (NTVariant*)geometryTag;
/**
 * Returns the action of the instruction.
 * @return The action to take.
 */
-(enum NTRoutingAction)getAction;
/**
 * Returns the index of the first geometry point in external point array.
 * @return The point index.
 */
-(int)getPointIndex;
/**
 * Returns the name of street.
 * @return The name of the street.
 */
-(NSString*)getStreetName;
/**
 * Returns the optional instruction description. This info is dependent on the routing engine (can be empty) and may be localized.
 * @return The optional instruction description.
 */
-(NSString*)getInstruction;
/**
 * Returns the turn angle of the action.
 * @return The turn angle in degrees.
 */
-(float)getTurnAngle;
/**
 * Returns the azimuth of the initial position.
 * @return The azimuth in degrees.
 */
-(float)getAzimuth;
/**
 * Returns the distance to move along the given street.
 * @return The distance to move in meters.
 */
-(double)getDistance;
/**
 * Returns the time approximate duration of the instruction.
 * @return The approximate duration of the instruction in seconds.
 */
-(double)getTime;
/**
 * Returns the geometry tag associated with the instructions.
 * @return The geometry tag associated with the instructions.
 */
-(NTVariant*)getGeometryTag;
/**
 * Creates a string representation of this instruction, useful for logging.
 * @return The string representation of this instruction.
 */
-(NSString*)description;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif
#import "NTMapPos.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTVariant.h"
#ifdef __cplusplus
extern "C" {
#endif

__attribute__ ((visibility("default"))) @interface NTRoutingInstructionVector : NSObject
{
	/** @internal:nodoc: */
	void *swigCPtr;
	/** @internal:nodoc: */
	BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
-(id)init;
-(unsigned int)size;
-(unsigned int)capacity;
-(void)reserve: (unsigned int)n;
-(BOOL)isEmpty;
-(void)clear;
-(void)add: (NTRoutingInstruction*)x;
-(NTRoutingInstruction*)get: (int)i;
-(void)set: (int)i val: (NTRoutingInstruction*)val;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

