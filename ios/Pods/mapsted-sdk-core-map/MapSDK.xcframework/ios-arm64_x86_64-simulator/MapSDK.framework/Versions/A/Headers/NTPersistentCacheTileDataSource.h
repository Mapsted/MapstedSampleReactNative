/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTMapBounds.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTMapTile.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTMapBounds.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTStringMap.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTCacheTileDataSource.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTTileDownloadListener.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTTileData.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * A tile data source that loads tiles from another tile data source
 * and caches them in an offline sqlite database. Tiles will remain in the database
 * even after the application is closed.
 * The database contains table "persistent_cache" with the following fields:
 * "tileId" (tile id), "compressed" (compressed tile image),
 * "time" (the time the tile was cached in milliseconds from epoch).
 * Default cache capacity is 50MB.
 */
__attribute__ ((visibility("default"))) @interface NTPersistentCacheTileDataSource : NTCacheTileDataSource
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTPersistentCacheTileDataSource*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a PersistentCacheTileDataSource object from tile data source
 * and a sqlite database. The sqlite database must be writable, if it doesn't exist, an empty one
 * will be created instead.
 * @param dataSource The datasource to be cached.
 * @param databasePath The path to the sqlite database, where the tiles will be cached.
 */
-(id)initWithDataSource: (NTTileDataSource*)dataSource databasePath: (NSString*)databasePath;
/**
 * Returns the state of cache only mode.
 * @return True when cache only mode is enabled, false otherwise.
 */
-(BOOL)isCacheOnlyMode;
/**
 * Switches the datasource to 'cache only' mode or switches back from the mode.
 * If enabled, tiles are loaded from the cache only and the original data source is not used.
 * By default, cache only mode is off.
 * @param enabled True when the mode should be enabled, false otherwise.
 */
-(void)setCacheOnlyMode: (BOOL)enabled;
/**
 * Starts downloading the specified area. The area will be stored in the cache.
 * Note that is the area is too big or cache is already filled, subsequent downloaded tiles
 * may push existing tile out of the cache.
 * @param mapBounds The bounds of the area to download. The coordinate system of the bounds must be the same as specified in the data source projection.
 * @param minZoom The minimum zoom of the tiles to load.
 * @param maxZoom The maximum zoom of the tiles to load.
 * @param tileDownloadListener The tile download listener to use that will receive download related callbacks.
 */
-(void)startDownloadArea: (NTMapBounds*)mapBounds minZoom: (int)minZoom maxZoom: (int)maxZoom tileDownloadListener: (NTTileDownloadListener*)tileDownloadListener;
/**
 * Stops all background downloader processes.
 */
-(void)stopAllDownloads;
/**
 * Returns the status of the cache database.
 * @return True if the persistent cache database is open and working, false otherwise.
 */
-(BOOL)isOpen;
/**
 * Closes the cache database. The datasource will still work afterwards,
 * but all requests will be directed to the original datasource.
 */
-(void)close;
-(NTTileData*)loadTile: (NTMapTile*)mapTile;
-(NTTileData*)loadTileSwigExplicitNTPersistentCacheTileDataSource: (NTMapTile*)mapTile;
-(void)clear;
-(void)clearSwigExplicitNTPersistentCacheTileDataSource;
-(unsigned long)getCapacity;
-(unsigned long)getCapacitySwigExplicitNTPersistentCacheTileDataSource;
-(void)setCapacity: (unsigned long)capacityInBytes;
-(void)setCapacitySwigExplicitNTPersistentCacheTileDataSource: (unsigned long)capacityInBytes;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

