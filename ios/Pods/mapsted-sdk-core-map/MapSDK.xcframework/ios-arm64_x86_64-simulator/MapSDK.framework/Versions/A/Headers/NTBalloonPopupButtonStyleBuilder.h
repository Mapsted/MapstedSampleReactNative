/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTColor.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTStyleBuilder.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTBalloonPopupStyle.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTBalloonPopupButtonStyle.h"
#ifdef __cplusplus
extern "C" {
#endif
@class NTBalloonPopupMargins;

/**
 * A builder class for BalloonPopupButtonStyle.
 */
__attribute__ ((visibility("default"))) @interface NTBalloonPopupButtonStyleBuilder : NTStyleBuilder
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTBalloonPopupButtonStyleBuilder*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a BalloonPopupButtonStyleBuilder object with all parameters set to defaults.
 */
-(id)init;
/**
 * Returns the width of the button.
 * If this value is -1, then button width is calculated automatically based on button text.
 * @return The width of the button in dp.
 */
-(int)getButtonWidth;
/**
 * Sets the width of the button.
 * The default is -1, which means that button width is calculated automatically based on button text.
 * @param buttonWidth The button width in dp, or -1.
 */
-(void)setButtonWidth: (int)buttonWidth;
/**
 * Returns the corner radius of the button.
 * @return The corner radius of the button in dp.
 */
-(int)getCornerRadius;
/**
 * Sets the corner radius of the button. Bigger values mean rounder corners, 0 creates
 * a rectangular button. The default is 3.
 * @param cornerRadius The new corner radius in dp.
 */
-(void)setCornerRadius: (int)cornerRadius;
/**
 * Returns the color of the text.
 * @return The color of the text.
 */
-(NTColor*)getTextColor;
/**
 * Sets the color of the text. The default is 0xFF000000.
 * @param textColor The new color for the text.
 */
-(void)setTextColor: (NTColor*)textColor;
/**
 * Returns the name of the text font.
 * @return The name of the text font.
 */
-(NSString*)getTextFontName;
/**
 * Sets the name of the text font. It must be one of the fonts bundled with the platform.
 * The default is HelveticaNeue-Light.
 * @param textFontName The new name for the text font.
 */
-(void)setTextFontName: (NSString*)textFontName;
/**
 * Returns the size of the text font.
 * @return The size of the text font.
 */
-(int)getTextFontSize;
/**
 * Sets the size of the text font. The default is 16.
 * @param textFontSize The new size for the text font in pts.
 */
-(void)setTextFontSize: (int)textFontSize;
/**
 * Returns the margins of the text.
 * @return The margins of the text.
 */
-(NTBalloonPopupMargins*)getTextMargins;
/**
 * Sets the margins for the text. The margins will determine how much
 * empty space should surround the text. The default is BalloonPopupMargins(8, 4, 8, 8).
 * @param textMargins The new margins for the text in dp.
 */
-(void)setTextMargins: (NTBalloonPopupMargins*)textMargins;
/**
 * Returns the color of the stroke surrounding the button.
 * @return The color of the stroke surrounding the button.
 */
-(NTColor*)getStrokeColor;
/**
 * Sets the color of the stroke surrounding the button. The default is 0xFF000000.
 * @param strokeColor The new color of the stroke surrounding the button.
 */
-(void)setStrokeColor: (NTColor*)strokeColor;
/**
 * Returns the width of the stroke surrounding the button.
 * @return The width of the stroke surrounding the button in dp.
 */
-(int)getStrokeWidth;
/**
 * Sets the width of the stroke surrounding the button. The default is 1.
 * @param strokeWidth The new width of the stroke surrounding the button.
 */
-(void)setStrokeWidth: (int)strokeWidth;
/**
 * Builds a new instance of the BalloonPopupButtonStyle object using previously set parameters.
 * @return A new BalloonPopupButtonStyle object.
 */
-(NTBalloonPopupButtonStyle*)buildStyle;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

