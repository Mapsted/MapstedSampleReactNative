/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * A container class that defines a half closed range of values using minimum and maximum values.
 */
__attribute__ ((visibility("default"))) @interface NTMapRange : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a MapRange object. The minimum value will be set to positive infinity
 * and the maximum value to negative infinity.
 */
-(id)init;
/**
 * Constructs a MapRange object from min and max values.
 * If min &gt; max, the values will be swapped internally.
 * @param min The min value.
 * @param max The max value.
 */
-(id)initWithMin: (float)min max: (float)max;
/**
 * Returns the min value of this map range.
 * @return The min value of this map range.
 */
-(float)getMin;
/**
 * Returns the max value of this map range.
 * @return The max value of this map range.
 */
-(float)getMax;
/**
 * Tests if a value is in this map range. Value is considered in range if min &lt;= val &lt; max.
 * @param value The value to be tested.
 * @return True if value is in this map range.
 */
-(BOOL)inRange: (float)value;
/**
 * Calculate the midrange value.
 * @return The midrange value.
 */
-(float)getMidrange;
/**
 * Calculates the length of this map range. Defined as max - min.
 * @return The length of this map range.
 */
-(float)length;
/**
 * Checks for equality between this and another map tile.
 * @param mapRange The other map range.
 * @return True if equal.
 */
-(BOOL)isEqualInternal: (NTMapRange*)mapRange;
/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(int)hashInternal;
/**
 * Creates a string representation of this map range, useful for logging.
 * @return The string representation of this map range.
 */
-(NSString*)description;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

