/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTPackageManager.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTCartoVectorTileLayer.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTAssetPackage.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * Offline map package manager that uses Carto online service for map package downloads.
 * After packages are downloaded, they can be used offline without any connection to the server.
 */
__attribute__ ((visibility("default"))) @interface NTCartoPackageManager : NTPackageManager
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTCartoPackageManager*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a CartoPackageManager object, given application context and data folder.
 * The data folder must exist before creating a new package manager and it is assumed to be persistent.
 * Note: the package manager must be explicitly started using start() method!
 * @param source Name of the package source. The official source is "carto.streets".
 * @param dataFolder The folder where downloaded packages are kept. It must exist and must be writable.
 * @throws NSException If package manager fails to open or create package database.
 */
-(id)initWithSource: (NSString*)source dataFolder: (NSString*)dataFolder;
/**
 * Returns the specified style asset package.
 * @param style The style of the asset package to return.
 */
-(NTAssetPackage*)getStyleAssetPackage: (enum NTCartoBaseMapStyle)style;
/**
 * Starts updating the specified map style asynchronously. When this task finishes, listener is called.
 * @return True if the style will be downloaded and listener will be notified (if set). False if it can not be downloaded.
 */
-(BOOL)startStyleDownload: (enum NTCartoBaseMapStyle)style;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

