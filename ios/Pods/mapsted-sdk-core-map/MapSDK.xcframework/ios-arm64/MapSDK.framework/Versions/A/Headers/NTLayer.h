/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTMapRange.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTScreenPos.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTVariant.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTViewState.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTCullState.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTClickInfo.h"
#ifdef __cplusplus
extern "C" {
#endif
@class NTStringVariantMap;

/**
 * An abstract base class for all layers.
 */
__attribute__ ((visibility("default"))) @interface NTLayer : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTLayer*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;


/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Returns a copy of the layer meta data map. The changes you make to this map are NOT reflected in the actual meta data of the layer.
 * @return A copy of the layer meta data map.
 */
-(NTStringVariantMap*)getMetaData;
/**
 * Sets a new meta data map for the layer. Old meta data values will be lost.
 * @param metaData The new meta data map for this layer.
 */
-(void)setMetaData: (NTStringVariantMap*)metaData;
/**
 * Returns true if the specified key exists in the layer meta data map.
 * @param key The key to check.
 * @return True if the meta data element exists.
 */
-(BOOL)containsMetaDataKey: (NSString*)key;
/**
 * Returns a layer meta data element corresponding to the key. If no value is found null variant is returned.
 * @param key The key to use.
 * @return The value corresponding to the key from the meta data map. If the key does not exist, empty variant is returned.
 */
-(NTVariant*)getMetaDataElement: (NSString*)key;
/**
 * Adds a new key-value pair to the layer meta data map. If the key already exists in the map,
 * it's value will be replaced by the new value.
 * @param key The new key.
 * @param element The new value.
 */
-(void)setMetaDataElement: (NSString*)key element: (NTVariant*)element;
/**
 * Returns the layer task priority of this layer.
 * @return The priority level for the tasks of this layer.
 */
-(int)getUpdatePriority;
/**
 * Sets the layer task priority. Higher priority layers get to load data before
 * lower priority layers. Normal layers and tile layers have seperate task queues and thus 
 * don't compete with each other for task queue access. The default is 0.
 * @param priority The new task priority for this layer, higher values get better access.
 */
-(void)setUpdatePriority: (int)priority;
/**
 * Sets the layer culling delay. The culling delay is used to delay layer content rendering in case of user interaction,
 * higher delay improves performance and battery life at the expense of interactivity. Default is 200ms-400ms, depending
 * on layer type.
 * @param delay The new culling delay in milliseconds.
 */
-(void)setCullDelay: (int)delay;
/**
 * Returns the opacity of this layer.
 * @return The opacity of this layer.
 */
-(float)getOpacity;
/**
 * Set the opacity of the layer.
 * @param opacity The opacity of the layer in range (0..1). 1.0 is the default value.
 */
-(void)setOpacity: (float)opacity;
/**
 * Returns the visibility of this layer.
 * @return True if the layer is visible.
 */
-(BOOL)isVisible;
/**
 * Sets the visibility of this layer.
 * @param visible The new visibility state of the layer.
 */
-(void)setVisible: (BOOL)visible;
/**
 * Returns the visible zoom range of this layer.
 * @return The visible zoom range of this layer.
 */
-(NTMapRange*)getVisibleZoomRange;
/**
 * Sets the visible zoom range for this layer. Current zoom level must be within this range for the layer to be visible.
 * This range is half-open, thus layer is visible if range.min &lt;= ZOOMLEVEL &lt; range.max.
 * @param range new visible zoom range
 */
-(void)setVisibleZoomRange: (NTMapRange*)range;
/**
 * Tests whether this layer is being currently updated.
 * @return True when the layer is being updated or false when the layer is in steady state.
 */
-(BOOL)isUpdateInProgress;
/**
 * Updates the layer using new visibility information. This method is periodically called when the map view moves.
 * The visibilty info is saved, so the data can be refreshed later.
 * @param cullState The new visibilty information.
 */
-(void)update: (NTCullState*)cullState;
/**
 * Refreshes the layer using old stored visibility information. This method might be called if some of the layer data
 * changes.
 */
-(void)refresh;
/**
 * Simulate click on this layer. This may trigger any event listeners attached to the layer.
 * @param clickType The type of the click.
 * @param screenPos The screen position for the simulated click.
 * @param viewState The view state to use.
 */
-(void)simulateClick: (enum NTClickType)clickType screenPos: (NTScreenPos*)screenPos viewState: (NTViewState*)viewState;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif
#import "NTMapRange.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTScreenPos.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTVariant.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTViewState.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTCullState.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTClickInfo.h"
#ifdef __cplusplus
extern "C" {
#endif
@class NTStringVariantMap;

__attribute__ ((visibility("default"))) @interface NTLayerVector : NSObject
{
	/** @internal:nodoc: */
	void *swigCPtr;
	/** @internal:nodoc: */
	BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
-(id)init;
-(unsigned int)size;
-(unsigned int)capacity;
-(void)reserve: (unsigned int)n;
-(BOOL)isEmpty;
-(void)clear;
-(void)add: (NTLayer*)x;
-(NTLayer*)get: (int)i;
-(void)set: (int)i val: (NTLayer*)val;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

