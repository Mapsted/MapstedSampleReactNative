/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif

/**
 * A double precision map vector defined by 3 coordinates.
 */
__attribute__ ((visibility("default"))) @interface NTMapVec : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a MapVec object. All coordinates will be 0.
 */
-(id)init;
/**
 * Constructs a MapVec object from 2 coordinates. The z coordinate will be 0.
 * @param x The x coordinate.
 * @param y The y coordinate.
 */
-(id)initWithX: (double)x y: (double)y;
/**
 * Constructs a MapVec object from 3 coordinates.
 * @param x The x coordinate.
 * @param y The y coordinate.
 * @param z The z coordinate.
 */
-(id)initWithX: (double)x y: (double)y z: (double)z;
/**
 * Returns the x coordinate of this map vector.
 * @return The x coordinate of this map vector.
 */
-(double)getX;
/**
 * Returns the y coordinate of this map vector.
 * @return The y coordinate of this map vector.
 */
-(double)getY;
/**
 * Returns the z coordinate of this map vector.
 * @return The z coordinate of this map vector.
 */
-(double)getZ;
/**
 * Creates a new map vector by adding a map vector to this map vector.
 * @param v The map vector to be added.
 * @return The new map vector.
 */
-(NTMapVec*)add: (NTMapVec*)v;
/**
 * Creates a new map vector by subtracting a map vector from this map vector.
 * @param v The map vector to be subtracted.
 * @return The new map vector.
 */
-(NTMapVec*)sub: (NTMapVec*)v;
/**
 * Creates a new map vector by multiplying this map vector with a multiplier.
 * @param multiplier The multiplier.
 * @return The new map vector.
 */
-(NTMapVec*)mul: (double)multiplier;
/**
 * Creates a new map vector by dividing this map vector with a divider.
 * @param divider The divider.
 * @return The new map vector.
 */
-(NTMapVec*)div: (double)divider;
/**
 * Checks for equality between this and another map vector.
 * @param v The other map vector.
 * @return True if equal.
 */
-(BOOL)isEqualInternal: (NTMapVec*)v;
/**
 * Calculates the length of this map vector.
 * @return The length of this map vector.
 */
-(double)length;
/**
 * Creates a new map vector by normalizing this map vector.
 * @return The new normalized map vector.
 */
-(NTMapVec*)getNormalized;
/**
 * Calculates the 2D cross product between this and another map vector. Defined as x1 * y2 - y1 * x2.
 * @param v The other map vector.
 * @return The 2D cross product between this and another map vector.
 */
-(double)crossProduct2D: (NTMapVec*)v;
/**
 * Creates a new map vector that's perpendicular to the plane defined by this and another map vector.
 * @param v The other map vector.
 * @return The new perpendicular map vector.
 */
-(NTMapVec*)crossProduct3D: (NTMapVec*)v;
/**
 * Calculates the dot product between this and another map vector.
 * @param v The other map vector.
 * @return The dot product between this and another map vector.
 */
-(double)dotProduct: (NTMapVec*)v;
/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(int)hashInternal;
/**
 * Creates a string representation of this map vector, useful for logging.
 * @return The string representation of this map vector.
 */
-(NSString*)description;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

