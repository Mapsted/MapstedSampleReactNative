/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTColor.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTBitmap.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTLabelStyleBuilder.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTTextStyle.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * A builder class for TextStyle.
 */
__attribute__ ((visibility("default"))) @interface NTTextStyleBuilder : NTLabelStyleBuilder
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTTextStyleBuilder*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a TextStyleBuilder object with all parameters set to defaults.
 */
-(id)init;
/**
 * Returns the font name for the text label.
 * @return The platform dependent font name for the text label.
 */
-(NSString*)getFontName;
/**
 * Sets the font name for the text label.
 * @param fontName The new platform dependent font name for the text label.
 */
-(void)setFontName: (NSString*)fontName;
/**
 * Returns the text field variable. If not empty, this variable is used to read actual text string from object meta info.
 * @return The current text variable.
 */
-(NSString*)getTextField;
/**
 * Sets the text field variable. If not empty, this variable is used to read actual text string from object meta info.
 * @param field The text field to use for displaying text from metainfo.
 */
-(void)setTextField: (NSString*)field;
/**
 * Returns the font size for the text label.
 * @return The font size for the text label in points.
 */
-(float)getFontSize;
/**
 * Sets the font size for the text label.
 * @param size The new font size for the text label in points.
 */
-(void)setFontSize: (float)size;
/**
 * Returns the state of the 'break lines' flag.
 * @return The state of the 'break lines' flag.
 */
-(BOOL)isBreakLines;
/**
 * Sets the state of the 'break lines' flag.
 * If enabled, texts containing CR or NL characters are split into multiple lines.
 * By default the flag is false, due to backward compatibility reasons.
 */
-(void)setBreakLines: (BOOL)enable;
/**
 * Returns the margins for the text.
 * @return The margins for the text.
 */
-(NTTextMargins*)getTextMargins;
/**
 * Sets the margins for the text. The margins will determine how much
 * empty space should surround the text. The default is TextMargins(0, 0, 0, 0).
 * @param textMargins The new margins for the text in dp.
 */
-(void)setTextMargins: (NTTextMargins*)textMargins;
/**
 * Returns the stroke color for the text label.
 * @return The stroke color for the text label.
 */
-(NTColor*)getStrokeColor;
/**
 * Sets the stroke color for the text label.
 * @param strokeColor The new stroke color for the text label.
 */
-(void)setStrokeColor: (NTColor*)strokeColor;
/**
 * Returns the stroke width for the text label.
 * @return The stroke width for the text label in screen density independent pixels.
 */
-(float)getStrokeWidth;
/**
 * Sets the stroke width for the text label.
 * @param strokeWidth The new stroke width for the text label in screen density independent pixels.
 */
-(void)setStrokeWidth: (float)strokeWidth;
/**
 * Returns the border color for the text label.
 * @return The border color for the text label.
 */
-(NTColor*)getBorderColor;
/**
 * Sets the border color for the text label.
 * @param borderColor The new border color for the text label. By default the border color is transparent.
 */
-(void)setBorderColor: (NTColor*)borderColor;
/**
 * Returns the border width for the text label.
 * @return The border width for the text label in screen density independent pixels.
 */
-(float)getBorderWidth;
/**
 * Sets the border width for the text label.
 * @param borderWidth The new border width for the text label in screen density independent pixels. By default the border width is 0.
 */
-(void)setBorderWidth: (float)borderWidth;
/**
 * Returns the background color for the text label.
 * @return The background color for the text label.
 */
-(NTColor*)getBackgroundColor;
/**
 * Sets the background color for the text label.
 * @param backgroundColor The new background color for the text label. By default the background color is transparent.
 */
-(void)setBackgroundColor: (NTColor*)backgroundColor;
/**
 * Builds a new instance of the TextStyle object using previously set parameters.
 * @return A new TextStyle object.
 */
-(NTTextStyle*)buildStyle;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

