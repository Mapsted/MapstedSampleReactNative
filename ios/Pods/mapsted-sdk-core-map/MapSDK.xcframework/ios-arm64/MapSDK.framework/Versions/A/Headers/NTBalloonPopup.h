/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTMapPos.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTScreenPos.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTBitmap.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTGeometry.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTBalloonPopupStyle.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTClickInfo.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTBalloonPopupButton.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTBalloonPopupEventListener.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTPopup.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * A highly configurable popup implementation that allows the user to specify a title, description, colors, images, font sizes etc.
 */
__attribute__ ((visibility("default"))) @interface NTBalloonPopup : NTPopup
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTBalloonPopup*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a BalloonPopup object with the specified style and attaches it to a billboard element.
 * If an empty string is passed for the title, it will not be drawn. The same applies to the description.
 * @param baseBillboard The billboard this balloon popup will be attached to.
 * @param style The style that defines what this balloon popup looks like.
 * @param title The text this balloon popup will display.
 * @param desc The description this balloon popup will display.
 */
-(id)initWithBaseBillboard: (NTBillboard*)baseBillboard style: (NTBalloonPopupStyle*)style title: (NSString*)title desc: (NSString*)desc;
/**
 * Constructs a BalloonPopup object from a geometry object and a style.
 * If an empty string is passed for the title, it will not be drawn. The same applies to the description.
 * @param geometry The geometry object that defines the location of this balloon popup.
 * @param style The style that defines what this balloon popup looks like.
 * @param title The text this balloon popup will display.
 * @param desc The description this balloon popup will display.
 */
-(id)initWithGeometry: (NTGeometry*)geometry style: (NTBalloonPopupStyle*)style title: (NSString*)title desc: (NSString*)desc;
/**
 * Constructs a BalloonPopup object from a map position and a style.
 * If an empty string is passed for the title, it will not be drawn. The same applies to the description.
 * @param pos The map position that defines the location of this balloon popup.
 * @param style The style that defines what this balloon popup looks like.
 * @param title The text this balloon popup will display.
 * @param desc The description this balloon popup will display.
 */
-(id)initWithPos: (NTMapPos*)pos style: (NTBalloonPopupStyle*)style title: (NSString*)title desc: (NSString*)desc;
/**
 * Returns the title of this balloon popup.
 * @return The title of this balloon popup.
 */
-(NSString*)getTitle;
/**
 * Sets the title this balloon popup will display. If an empty string is passed
 * the title will not be drawn.
 * @param title The new title this balloon popup will display.
 */
-(void)setTitle: (NSString*)title;
/**
 * Returns the description of this balloon popup.
 * @return The description of this balloon popup.
 */
-(NSString*)getDescription;
/**
 * Sets the description this balloon popup will display. If an empty string is passed
 * the description will not be drawn.
 * @param desc The new description this balloon popup will display.
 */
-(void)setDescription: (NSString*)desc;
/**
 * Returns the style of this balloon popup.
 * @return The style that defines what this balloon popup looks like.
 */
-(NTBalloonPopupStyle*)getStyle;
/**
 * Sets the style for this balloon popup.
 * @param style The new style that defines what this balloon popup looks like.
 */
-(void)setStyle: (NTBalloonPopupStyle*)style;
/**
 * Removes all buttons from the balloon popup.
 */
-(void)clearButtons;
/**
 * Adds a new button to the balloon popup.
 * If the button is already added, the call is ignored.
 * @param button The button object to add. 
 */
-(void)addButton: (NTBalloonPopupButton*)button;
/**
 * Replaces an old baloon popup button with a new button.
 * @param oldButton The old button to replace.
 * @param newButton The new button.
 */
-(void)replaceButton: (NTBalloonPopupButton*)oldButton newButton: (NTBalloonPopupButton*)newButton;
/**
 * Removes a button from the balloon popup.
 * If the button is not present, the call is ignored.
 * @param button The button object to remove.
 */
-(void)removeButton: (NTBalloonPopupButton*)button;
/**
 * Returns the balloon popup event listener.
 * @return The balloon popup event listener.
 */
-(NTBalloonPopupEventListener*)getBalloonPopupEventListener;
/**
 * Sets the balloon popup event listener.
 * @param eventListener The balloon popup event listener.
 */
-(void)setBalloonPopupEventListener: (NTBalloonPopupEventListener*)eventListener;
-(BOOL)processClick: (NTClickInfo*)clickInfo clickPos: (NTMapPos*)clickPos elementClickPos: (NTScreenPos*)elementClickPos;
-(NTBitmap*)drawBitmap: (NTScreenPos*)anchorScreenPos screenWidth: (float)screenWidth screenHeight: (float)screenHeight dpToPX: (float)dpToPX;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

