/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTMapTile.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTMapBounds.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTVariant.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTTileDataSource.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTTileData.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTFeatureCollection.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTProjection.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * A tile data source that builds vector tiles from GeoJSON inputs.
 */
__attribute__ ((visibility("default"))) @interface NTGeoJSONVectorTileDataSource : NTTileDataSource
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * Creates a polymorphic instance of the given native object. This is used internally by the SDK.
 * @param cPtr The native pointer of the instance.
 * @param cMemoryOwn The ownership flag.
 * @return The new instance.
 */
/** @internal:nodoc: */
+(NTGeoJSONVectorTileDataSource*)swigCreatePolymorphicInstance:(void*)cPtr swigOwnCObject:(BOOL)cMemoryOwn;

/**
 * Constructs a GeoJSONVectorTileDataSource object.
 * Note: EPSG3857 projection is used.
 * @param minZoom The minimum zoom level supported by this data source.
 * @param maxZoom The maximum zoom level supported by this data source.
 */
-(id)initWithMinZoom: (int)minZoom maxZoom: (int)maxZoom;
/**
 * Returns the simplification tolerance in tile pixels.
 * @return The simplification tolerance in tile pixels.
 */
-(float)getSimplifyTolerance;
/**
 * Sets the simplification tolerance in tile pixels.
 * @param tolerance The simplification tolerance in tile pixels. The default is 1.0. Use 0.0 to disable simplification.
 */
-(void)setSimplifyTolerance: (float)tolerance;
/**
 * Returns the default layer buffer in tile pixels.
 * @return The default layer buffer in tile pixels.
 */
-(float)getDefaultLayerBuffer;
/**
 * Sets the default layer buffer in tile pixels. This buffer value will be used for all layers created afterwards.
 * 
 */
-(void)setDefaultLayerBuffer: (float)tolerance;
/**
 * Creates a new layer with specified name.
 * @param name The name for the layer.
 * @return The layer index of the created layer.
 * @throws NSException If an error occured during creation of the layer.
 */
-(int)createLayer: (NSString*)name;
/**
 * Sets the features of the specified layer.
 * @param layerIndex The index of the layer. A layer with empty name will be created if it does not exist yet.
 * @param geoJSON A geojson type variant that MUST contain single FeatureColletion element.
 * @throws NSException If an error occured during updating the layer.
 */
-(void)setLayerGeoJSON: (int)layerIndex geoJSON: (NTVariant*)geoJSON;
/**
 * Sets the feature collection of the specified layer.
 * @param layerIndex The index of the layer. A layer with empty name will be created if it does not exist yet.
 * @param projection Projection for the features in featureCollection. Can be null if the coordinates are based on WGS84.
 * @param featureCollection The feature collection for the specified layer.
 * @throws NSException If an error occured during updating the layer.
 */
-(void)setLayerFeatureCollection: (int)layerIndex projection: (NTProjection*)projection featureCollection: (NTFeatureCollection*)featureCollection;
/**
 * Deletes an existing layer.
 * @param layerIndex The index of layer to delete.
 */
-(void)deleteLayer: (int)layerIndex;
-(NTMapBounds*)getDataExtent;
-(NTMapBounds*)getDataExtentSwigExplicitNTGeoJSONVectorTileDataSource;
-(NTTileData*)loadTile: (NTMapTile*)mapTile;
-(NTTileData*)loadTileSwigExplicitNTGeoJSONVectorTileDataSource: (NTMapTile*)mapTile;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;
/**
 * Returns the actual class name of this object. This is used internally by the SDK.
 * @return The class name of this object.
 */
/** @internal:nodoc: */
-(NSString*)swigGetClassName;
/**
 * Returns the pointer to the connected director object. This is used internally by the SDK.
 * @return The pointer to the connected director object or null if director is not connected.
 */
/** @internal:nodoc: */
-(void *)swigGetDirectorObject;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

