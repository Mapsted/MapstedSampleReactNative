/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTMapPos.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTVariant.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTProjection.h"
#ifdef __cplusplus
extern "C" {
#endif

/**
 * A geocoding request describing text-based query and other optional constraints.
 */
__attribute__ ((visibility("default"))) @interface NTGeocodingRequest : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a new GeocodingRequest object from a projection and a string-based query.
 * @param projection The projection to use for the result and location data.
 * @param query The text-based query.
 */
-(id)initWithProjection: (NTProjection*)projection query: (NSString*)query;
/**
 * Returns the text-based query of the request.
 * @return The text-based query of the request.
 */
-(NSString*)getQuery;
/**
 * Returns the projection of the request.
 * @return The projection of the request.
 */
-(NTProjection*)getProjection;
/**
 * Returns the location attribute of the request.
 * The matching address near the specified location (up to a specified radius) are preferred.
 * @return The location attribute of the request.
 */
-(NTMapPos*)getLocation;
/**
 * Sets the location attribute of the request.
 * The matching address near the specified location (up to a specified radius) are preferred.
 * @param pos The new location for the request.
 */
-(void)setLocation: (NTMapPos*)pos;
/**
 * Returns the location radius attribute of the request (in meters).
 * @return The location radius attribute of the request in meters.
 */
-(float)getLocationRadius;
/**
 * Sets the location radius attribute of the request.
 * The default is 0, which means that location based ranking is not applied.
 * @param radius The location radius attribute of the request in meters.
 */
-(void)setLocationRadius: (float)radius;
/**
 * Returns the custom parameter value of the request.
 * @param param The name of the parameter to return.
 * @return The value of the parameter. If the parameter does not exist, empty variant is returned.
 */
-(NTVariant*)getCustomParameter: (NSString*)param;
/**
 * Sets a custom parameter value for the the request.
 * @param param The name of the parameter. For example, "ranking.location_sigma".
 * @param value The new value for the parameter.
 */
-(void)setCustomParameter: (NSString*)param value: (NTVariant*)value;
/**
 * Creates a string representation of this request object, useful for logging.
 * @return The string representation of this request object.
 */
-(NSString*)description;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

