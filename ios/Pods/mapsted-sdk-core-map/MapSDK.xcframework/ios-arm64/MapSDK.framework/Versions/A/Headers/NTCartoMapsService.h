/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>


#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif
#import "NTVariant.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTIntVector.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTStringMap.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTStringVector.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTLayer.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif
#import "NTAssetPackage.h"
#ifdef __cplusplus
extern "C" {
#endif
@class NTStringVariantMap;
@class NTLayerVector;

/**
 * A high-level interface for Carto Maps Service.
 * The service can be used to automatically configure layers using
 * anonymous map configurations or by using parametrized named maps.
 */
__attribute__ ((visibility("default"))) @interface NTCartoMapsService : NSObject
{
  /** @internal:nodoc: */
  void *swigCPtr;
  /** @internal:nodoc: */
  BOOL swigCMemOwn;
}
/** @internal:nodoc: */
-(void*)getCptr;
/** @internal:nodoc: */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**  
 * Checks if this object is equal to the specified object.
 * @param object The reference object.
 * @return True when objects are equal, false otherwise.
 */
-(BOOL)isEqual:(id)object;

/**
 * Returns the hash value of this object.
 * @return The hash value of this object.
 */
-(NSUInteger)hash;

/**
 * Constructs a new CartoMapsService instance with default settings.
 */
-(id)init;
/**
 * Returns the user account name used when accessing the online service.
 * @return The user account name used when accessing the online service.
 */
-(NSString*)getUsername;
/**
 * Sets the user account name used when accessing the online service.
 * @param username The user account name used when accessing the online service.
 */
-(void)setUsername: (NSString*)username;
/**
 * Returns the API key used when accessing the online service.
 * @return The API key used when accessing the online service.
 */
-(NSString*)getAPIKey;
/**
 * Sets the optional API key used when accessing the online service.
 * Usually this is not needed and can be left blank.
 * @param apiKey The optional API key used when accessing the online service.
 */
-(void)setAPIKey: (NSString*)apiKey;
/**
 * Returns the API endpoint template of the online service.
 * @return The API endpoint template of the online service.
 */
-(NSString*)getAPITemplate;
/**
 * Sets the API endpoint template of the online service.
 * By default cartodb.com endpoint is used. This needs to be redefined only for on-premise services.
 * @param apiTemplate The API endpoint template of the online service. For example, "https://{user}.cartodb.com"
 */
-(void)setAPITemplate: (NSString*)apiTemplate;
/**
 * Returns true is the service configures
 * layers as interactive by using UTF grids for click detection.
 * @return True if the service configures layers as interactive.
 */
-(BOOL)isInteractive;
/**
 * Sets the interactivity flag of the layers.
 * @param interactive True if layers should be configured as interactive. The default is false.
 */
-(void)setInteractive: (BOOL)interactive;
/**
 * Returns the list of layer indices that are created.
 * If non-empty, only layers from this list are created.
 * @return The list of layer indices that are created.
 */
-(NTIntVector*)getLayerIndices;
/**
 * Sets the list of layer indices that are created.
 * If non-empty, only layers from this list are created.
 * @param layerIndices The list of layer indices that are created.
 */
-(void)setLayerIndices: (NTIntVector*)layerIndices;
/**
 * Returns the list of authentication tokens used when accessing online service.
 * @return The list of authentication tokens used when accessing online service.
 */
-(NTStringVector*)getAuthTokens;
/**
 * Sets the list of authentication tokens used when accessing online service.
 * @param authTokens The list of authentication tokens used when accessing online service.
 */
-(void)setAuthTokens: (NTStringVector*)authTokens;
/**
 * Returns true if the service configures layers as vector tile layers,
 * when possible. By default this is false. Vector layers
 * provide much better visual quality at the expense of performance.
 * @return True if vector layers should be used. False is raster layers are used.
 */
-(BOOL)isDefaultVectorLayerMode;
/**
 * Sets the service to vector layer mode or raster layer mode.
 * By default service creates raster layers, but vector layers may
 * provide much better visual quality at the expense of performance.
 * @param vectorLayerMode True if vector layers should be used. False is raster layers are used.
 */
-(void)setDefaultVectorLayerMode: (BOOL)vectorLayerMode;
/**
 * Returns the current vector tile buffer size.
 * @return The current vector tile buffer size in pixels.
 */
-(float)getVectorTileBufferSize;
/**
 * Sets the current vector tile buffer size.
 * This can be used to tweak/improve performance or fix rendering artifacts.
 * The lower values make tiles smaller and improve performance but may create rendering artifacts.
 * The default value is 64 and should be good fit for most visualizations.
 * @param bufferSize The new buffer size value.
 */
-(void)setVectorTileBufferSize: (float)bufferSize;
/**
 * Returns true if 'strict mode' is enabled (the service throws exceptions whenever an error is encountered).
 * @return True if 'strict mode' is enabled.
 */
-(BOOL)isStrictMode;
/**
 * Sets the 'strict mode' flag.
 * @param strictMode True if all errors result in exceptions. The default is false.
 */
-(void)setStrictMode: (BOOL)strictMode;
/**
 * Returns the asset package used when decoding vector tiles.
 * By default, no asset package is used and null is returned.
 * @return The asset package used when decoding vector tiles.
 */
-(NTAssetPackage*)getVectorTileAssetPackage;
/**
 * Sets the asset package used when decoding vector tiles.
 * Asset package with fonts is needed when texts are used.
 * @param assetPackage The asset package to use for vector tiles.
 */
-(void)setVectorTileAssetPackage: (NTAssetPackage*)assetPackage;
/**
 * Builds a list of layers given anonymous map configuration.
 * The map configuration specification can be found in CartoDB documentation page.
 * @param mapConfig The map configuration JSON deserialized as Variant type.
 * @return The list of created layers.
 * @throws NSException If IO error occured during the operation.
 */
-(NTLayerVector*)buildMap: (NTVariant*)mapConfig;
/**
 * Builds a list of layers given named map id and named map parameters.
 * @param templateId The named map id.
 * @param templateParams The map containing named map parameter names and their values.
 * @return The list of created layers.
 * @throws NSException If IO error occured during the operation.
 */
-(NTLayerVector*)buildNamedMap: (NSString*)templateId templateParams: (NTStringVariantMap*)templateParams;
/**
 * Returns the raw pointer to the object. This is used internally by the SDK.
 * @return The internal pointer of the object.
 */
/** @internal:nodoc: */
-(long long)swigGetRawPtr;

-(void)dealloc;

@end


#ifdef __cplusplus
}
#endif

