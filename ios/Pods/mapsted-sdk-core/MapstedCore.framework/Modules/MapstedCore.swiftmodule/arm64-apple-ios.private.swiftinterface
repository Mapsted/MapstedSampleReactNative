// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapstedCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Accelerate
import CoreBluetooth
import CoreData
import Dispatch
import Foundation
@_exported import MapstedCore
import MobileCoreServices
import SSZipArchive
import Security
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
extension MapstedCore.MNSearchEntity {
  convenience public init(entityId: Swift.Int, b: Swift.String)
  public func addToRecents(isSearch: Swift.Bool = false)
  public func mostRecent(forSearch: Swift.Bool = false) -> Foundation.Date?
  public func inRecents(forSearch: Swift.Bool = false) -> Swift.Bool
  public func addToFavorites()
  public func removeFromFavorites()
  public func toggleFavorite()
  public func isFavorite() -> Swift.Bool
  public var entityInfo: MapstedCore.CMSEntityInfo? {
    get
  }
  @objc dynamic public var entityName: Swift.String {
    @objc get
  }
  public var nickName: Swift.String {
    get
  }
  @objc dynamic public var entityNameEnglish: Swift.String {
    @objc get
  }
  @objc dynamic public var entityFloorId: Swift.Int {
    @objc get
  }
  @objc dynamic public var floorName: Swift.String {
    @objc get
  }
  @objc dynamic public var floorNameShort: Swift.String {
    @objc get
  }
  @objc dynamic public var entityPropertyId: Swift.Int {
    @objc get
  }
  @objc dynamic public var entityBuildingId: Swift.Int {
    @objc get
  }
  @objc dynamic public var entityCategoryName: Swift.String {
    @objc get
  }
  @objc dynamic public var entitySubCategoryNames: [Swift.String] {
    @objc get
  }
  @objc dynamic public var entityIdentifier: Swift.Int {
    @objc get
  }
  public var entityZone: MapstedCore.MNEntityZone? {
    get
  }
  @objc dynamic public var entityZoneArray: [MapstedCore.MNEntityZone] {
    @objc get
  }
  public var coverImageId: Swift.String {
    get
  }
  public var coverImages: [Swift.String] {
    get
  }
  public var logoImageBaseUrl: Swift.String {
    get
  }
  public var logoImageUid: Swift.String {
    get
  }
  public var categoryUID: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public var subcategoryNames: [Swift.String] {
    get
  }
  public var subcategoryUids: [Swift.String] {
    get
  }
  public var dailyHours: [MapstedCore.MNDailyBusinessHour] {
    get
  }
  public var businessHours: MapstedCore.WeeklyBusinessHours? {
    get
  }
  public var entityDescription: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var website: Swift.String? {
    get
  }
  public var socialLinks: [MapstedCore.SocialMedium : Swift.String] {
    get
  }
  public var timeHint: MapstedCore.DailyBusinessHours? {
    get
  }
  @objc dynamic public func entityIds() -> [Swift.Int]
  @objc dynamic public func keywords() -> [Swift.String]
  public func tags() -> [Swift.String]
  public var zoneLabel: MapstedCore.MNZoneLabel? {
    get
  }
  public var buildingName: Swift.String {
    get
  }
  @objc dynamic public var zoneLabelArray: [MapstedCore.MNZoneLabel] {
    @objc get
  }
  public var centroid: MapstedCore.MNMercator {
    get
  }
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
}
extension MapstedCore.MNSearchEntity : MapstedCore.CMSSearchable {
  public var searchable: any MapstedCore.ISearchable {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var image: UIKit.UIImage? {
    get
  }
  public var imageBaseUrlString: Swift.String? {
    get
  }
  public var imageIdString: Swift.String? {
    get
  }
  public var iconUrl: Swift.String {
    get
  }
  public var isMultiBuilding: Swift.Bool {
    get
  }
  public var propertyId: Swift.Int {
    get
  }
  public var buildingId: Swift.Int {
    get
  }
  public var floorId: Swift.Int {
    get
  }
  public var entityId: Swift.Int {
    get
  }
  public var isBuilding: Swift.Bool {
    get
  }
  public var name: Swift.String {
    get
  }
  public var categoryUid: Swift.String {
    get
  }
  public var categoryTags: [Swift.String] {
    get
  }
  public var categoryTagUids: [Swift.String] {
    get
  }
  public var locations: [MapstedCore.MNMercatorZone] {
    get
  }
  public var matchWord: (MapstedCore.MapstedCoreSearchApi.SearchableItemType, Swift.String) {
    get
    set
  }
  public var mapDataType: MapstedCore.MNDataType {
    get
    set
  }
  public var entities: [MapstedCore.MNSearchEntity] {
    get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var toolTipName: Swift.String {
    get
  }
}
public enum CMSCategoryType {
  case Global
  case Property
  public static func == (a: MapstedCore.CMSCategoryType, b: MapstedCore.CMSCategoryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class CMSCategory {
  final public let nameKey: Swift.String
  public init(categoryUid: Swift.String, name: Swift.String, nameKey: Swift.String, imageBaseUrl: Swift.String?, imageId: Swift.String?)
  public var categoryKey: Swift.String?
  public var imageBaseUrl: Swift.String?
  public var imageId: Swift.String?
  public var selectedImageId: Swift.String?
  public var rootImageId: Swift.String? {
    get
    set
  }
  public var selectedRootImageId: Swift.String?
  public var childrenUids: [Swift.String]
  public var parentUids: [Swift.String]
  public var logo: UIKit.UIImage?
  public var isRoot: Swift.Bool
  public var sortOrder: Swift.Int
  public var parentCategory: MapstedCore.CMSCategory?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CMSCategoryTree : ObjectiveC.NSObject {
  public var syncId: Swift.String
  public var global: Swift.Bool
  public var propertyId: Swift.Int
  public var imageBaseUrl: Swift.String?
  public var roots: [MapstedCore.CMSCategory]
  public var categories: [MapstedCore.CMSCategory]
  @objc deinit
}
extension MapstedCore.CMSCategory : MapstedCore.CMSSearchable {
  public var propertyId: Swift.Int {
    get
  }
  public var categoryUid: Swift.String {
    get
  }
  public var imageBaseUrlString: Swift.String? {
    get
  }
  public var imageIdString: Swift.String? {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var image: UIKit.UIImage? {
    get
  }
  public var isMultiBuilding: Swift.Bool {
    get
  }
  public var buildingId: Swift.Int {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public var buildingName: Swift.String {
    get
  }
  public var categoryTags: [Swift.String] {
    get
  }
  public var categoryTagUids: [Swift.String] {
    get
  }
  public var locations: [MapstedCore.MNMercatorZone] {
    get
  }
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
  public var matchWord: (MapstedCore.MapstedCoreSearchApi.SearchableItemType, Swift.String) {
    get
    set
  }
  public func keywords() -> [Swift.String]
  public var entities: [MapstedCore.MNSearchEntity] {
    get
  }
  public var mapDataType: MapstedCore.MNDataType {
    get
    set
  }
  public var isBuilding: Swift.Bool {
    get
  }
  public func inRecents(forSearch: Swift.Bool) -> Swift.Bool
  public var name: Swift.String {
    get
  }
  public var toolTipName: Swift.String {
    get
  }
}
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: MapstedCore.CompressionLevel
  public static let bestSpeed: MapstedCore.CompressionLevel
  public static let bestCompression: MapstedCore.CompressionLevel
  public static let defaultCompression: MapstedCore.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: MapstedCore.GzipError.Kind, b: MapstedCore.GzipError.Kind) -> Swift.Bool
  }
  public let kind: MapstedCore.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: MapstedCore.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: any MapstedCore.URLRequestConvertible, with parameters: MapstedCore.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : MapstedCore.ParameterEncoding {
  public enum Destination {
    case methodDependent, queryString, httpBody
    public static func == (a: MapstedCore.URLEncoding.Destination, b: MapstedCore.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets, noBrackets
    public static func == (a: MapstedCore.URLEncoding.ArrayEncoding, b: MapstedCore.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric, literal
    public static func == (a: MapstedCore.URLEncoding.BoolEncoding, b: MapstedCore.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: MapstedCore.URLEncoding {
    get
  }
  public static var methodDependent: MapstedCore.URLEncoding {
    get
  }
  public static var queryString: MapstedCore.URLEncoding {
    get
  }
  public static var httpBody: MapstedCore.URLEncoding {
    get
  }
  public let destination: MapstedCore.URLEncoding.Destination
  public let arrayEncoding: MapstedCore.URLEncoding.ArrayEncoding
  public let boolEncoding: MapstedCore.URLEncoding.BoolEncoding
  public init(destination: MapstedCore.URLEncoding.Destination = .methodDependent, arrayEncoding: MapstedCore.URLEncoding.ArrayEncoding = .brackets, boolEncoding: MapstedCore.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: any MapstedCore.URLRequestConvertible, with parameters: MapstedCore.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : MapstedCore.ParameterEncoding {
  public static var `default`: MapstedCore.JSONEncoding {
    get
  }
  public static var prettyPrinted: MapstedCore.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: any MapstedCore.URLRequestConvertible, with parameters: MapstedCore.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: any MapstedCore.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct PropertyListEncoding : MapstedCore.ParameterEncoding {
  public static var `default`: MapstedCore.PropertyListEncoding {
    get
  }
  public static var xml: MapstedCore.PropertyListEncoding {
    get
  }
  public static var binary: MapstedCore.PropertyListEncoding {
    get
  }
  public let format: Foundation.PropertyListSerialization.PropertyListFormat
  public let options: Foundation.PropertyListSerialization.WriteOptions
  public init(format: Foundation.PropertyListSerialization.PropertyListFormat = .xml, options: Foundation.PropertyListSerialization.WriteOptions = 0)
  public func encode(_ urlRequest: any MapstedCore.URLRequestConvertible, with parameters: MapstedCore.Parameters?) throws -> Foundation.URLRequest
}
public protocol CoreAssistPosInterface {
  func onSelectedCurrentLocation(location: MapstedCore.MNMercatorZone)
  func onSelectedCurrentLocationByAR(location: MapstedCore.MNMercatorZone)
  func setZoneChangeConfirmation(zone: MapstedCore.MNZone, expired: Swift.Bool)
  func setSelectedFloor(floorId: Swift.Int)
  func setSelectedNearbyEntity(propertyId: Swift.Int, buildingId: Swift.Int, floorId: Swift.Int, entityId: Swift.Int)
  func setSelectedNearbyEntity(nearbyEntity: MapstedCore.MNEntityZone)
  func getSelectNearbyEntityList(buildingId: Swift.Int, completion: @escaping (([Swift.Int]) -> Swift.Void))
}
@_spi(InternalAssistedPositioning) @_hasMissingDesignatedInitializers public class AssistPosManager {
  @_spi(InternalAssistedPositioning) public static let shared: any MapstedCore.CoreAssistPosInterface
  @_spi(InternalAssistedPositioning) @objc deinit
}
public protocol CoreCalibrationInterface {
  func isCalibration() -> Swift.Bool
  func startCalibration(position: MapstedCore.MNTag) -> Swift.Bool
  func stopCalibration()
  func processData()
  func clearCalibrationMode()
  func repostAnalyticsPackages()
  func fetchAnalyticsPackages() -> [[Swift.String : Any]]
  func addDescription(description: Swift.String)
  func setGroundTruth(groundTruths: [MapstedCore.MNPosition])
}
@_spi(InternalCalibration) @_hasMissingDesignatedInitializers public class CalibrationManager {
  @_spi(InternalCalibration) public static let shared: any MapstedCore.CoreCalibrationInterface
  @_spi(InternalCalibration) @objc deinit
}
public protocol CoreAssetsInterface {
  func getImage(id: Swift.String) -> UIKit.UIImage?
  func getImageFileUrl(id: Swift.String) -> Foundation.URL?
  func fetchMarketingImagesAsync(urlMap: [Swift.String : Swift.String], propertyId: Swift.Int)
}
@_spi(InternalImages) @_hasMissingDesignatedInitializers public class ImagesManager {
  @_spi(InternalImages) public static let shared: any MapstedCore.CoreAssetsInterface
  @_spi(InternalImages) @objc deinit
}
@_spi(DataCaptureSettingsInternal) public protocol CoreSettingsInterface {
  @_spi(DataCaptureSettingsInternal) func setDataCaptureID(dataCaptureId: Swift.Int)
  @_spi(DataCaptureSettingsInternal) func getDataCaptureID() -> Swift.Int
  @_spi(DataCaptureSettingsInternal) func setCalibrationMode(enable: Swift.Bool)
  @_spi(DataCaptureSettingsInternal) func setDataCaptureMode(dataCaptureMode: Swift.Bool)
  @_spi(DataCaptureSettingsInternal) func isDataCaptureMode() -> Swift.Bool
  @_spi(DataCaptureSettingsInternal) func isCalibrationMode() -> Swift.Bool
}
@_spi(DataCaptureSettingsInternal) @_hasMissingDesignatedInitializers public class DeveloperSettingsInternalUtils {
  @_spi(DataCaptureSettingsInternal) public static let shared: any MapstedCore.CoreSettingsInterface
  @_spi(DataCaptureSettingsInternal) @objc deinit
}
public protocol CoreCategoriesInterface {
  func getPropertyCategoryTree(propertyId: Swift.Int) -> MapstedCore.CMSCategoryTree?
  func getGlobalCategoryTree() -> MapstedCore.CMSCategoryTree?
  func getGlobalCategories() -> MapstedCore.CMSCategories?
}
@_spi(InternalCategories) @_hasMissingDesignatedInitializers public class CategoriesManager {
  @_spi(InternalCategories) public static let shared: any MapstedCore.CoreCategoriesInterface
  @_spi(InternalCategories) @objc deinit
}
public protocol CoreUtilitiesInterface {
  func findNearest(from entityZones: [MapstedCore.MNEntityZone], routingOptions: MapstedCore.MNRouteOptions?, completion: @escaping (MapstedCore.MNEntityZone?, (any Swift.Error)?, Swift.Double) -> ())
  func findNearest(from entities: [MapstedCore.MNSearchEntity], routingOptions: MapstedCore.MNRouteOptions?, completion: @escaping (MapstedCore.MNSearchEntity?, (any Swift.Error)?, Swift.Double) -> ())
  func getAppInformation() -> MapstedCore.AppInformation
}
@_spi(InternalUtilities) @_hasMissingDesignatedInitializers public class UtilitiesManager {
  @_spi(InternalUtilities) public static let shared: any MapstedCore.CoreUtilitiesInterface
  @_spi(InternalUtilities) @objc deinit
}
public protocol CoreLocationServicesInterface {
  func getCurrentGpsPosition() -> MapstedCore.MNGPSLoc?
  func isLocationServicesEnabled() -> (Swift.Bool, Swift.Bool)
  func getBLEStatus() -> (isEnabled: Swift.Bool, isSupported: Swift.Bool)
}
@_spi(InternalLocationServices) @_hasMissingDesignatedInitializers public class LocationServicesManager {
  @_spi(InternalLocationServices) public static let shared: any MapstedCore.CoreLocationServicesInterface
  @_spi(InternalLocationServices) @objc deinit
}
public protocol CoreAnalyticsInterface {
  func setAnalyticsEmail(email: Swift.String)
  func getAppVersion() -> Swift.String
}
@_spi(InternalAnalytics) @_hasMissingDesignatedInitializers public class AnalyticsManager {
  @_spi(InternalAnalytics) public static let shared: any MapstedCore.CoreAnalyticsInterface
  @_spi(InternalAnalytics) @objc deinit
}
public protocol CorePropertyServicesInterface {
  func downloadPropertyData(propertyId: Swift.Int, progress: @escaping ((Swift.Float) -> Swift.Void), completed: @escaping (() -> Swift.Void))
  func downloadPropertyCMSData(propertyId: Swift.Int, completed: @escaping (() -> Swift.Void))
  func createRetryPolicy(override: Swift.Bool, retryNow: Swift.Bool, retryTimes: Swift.Int, id: Swift.Int?, language: MapstedCore.MNLanguageType?, type: MapstedCore.MNRequestType, completion: ((_ isSucceed: Swift.Bool) -> ())?)
  func isPropertyDownloaded(propertyId: Swift.Int) -> Swift.Bool
  func isDownloadingProperty(propertyId: Swift.Int) -> Swift.Bool
  func getPropertyVersion(propertyId: Swift.Int) -> Swift.Int
  func getBuildingVersion(buildingId: Swift.Int) -> Swift.Int
  func propertyHasUpdate(propertyId: Swift.Int)
  func buildingHasUpdate(buildingId: Swift.Int)
  func propertyDownloadProgress(propertyId: Swift.Int) -> Swift.Int?
}
@_spi(InternalPropertyServices) @_hasMissingDesignatedInitializers public class PropertyServicesManager {
  @_spi(InternalPropertyServices) public static let shared: any MapstedCore.CorePropertyServicesInterface
  @_spi(InternalPropertyServices) @objc deinit
}
public protocol CoreClientAuthInterface {
  func login(email: Swift.String, password: Swift.String) -> Swift.Bool
}
@_spi(InternalAuthManager) @_hasMissingDesignatedInitializers public class InternalAuthManager {
  @_spi(InternalAuthManager) public static let shared: any MapstedCore.CoreClientAuthInterface
  @_spi(InternalAuthManager) @objc deinit
}
public protocol CoreGeofenceCallback {
  func onGeofenceTriggered(propertyId: Swift.Int, geofenceId: Swift.String)
}
public protocol CoreGeofenceInterface {
  func addGeofenceTrigger(propertyId: Swift.Int, geofenceTriggerBuilder: MapstedCore.CppGeofenceTriggerBuilder) -> Swift.Bool
  func addGeofenceTriggers(propertyId: Swift.Int, geofenceTriggerBuilders: [MapstedCore.CppGeofenceTriggerBuilder]) -> Swift.Bool
  func removeGeofenceTrigger(propertyId: Swift.Int, geofenceId: Swift.String) -> Swift.Bool
  func removeAllGeofenceTriggers(propertyId: Swift.Int) -> Swift.Bool
  func setGeofenceCallback(coreGeofenceCallback: any MapstedCore.CoreGeofenceCallback)
}
@_spi(InternalGeofenceManager) @_hasMissingDesignatedInitializers public class InternalGeofenceManager {
  @_spi(InternalGeofenceManager) public static let shared: any MapstedCore.CoreGeofenceInterface
  @_spi(InternalGeofenceManager) @objc deinit
}
public enum MapstedAnalyticsLabels {
  public static let SPLASH: Swift.String
  public static let OUTDOOR_HOME: Swift.String
  public static let OUTDOOR_PROPERTY_LIST: Swift.String
  public static let OUTDOOR_CATEGORY_LIST: Swift.String
  public static let OUTDOOR_CATEGORY_ITEM: Swift.String
  public static let OUTDOOR_FEED_LIST: Swift.String
  public static let OUTDOOR_FEED_ITEM: Swift.String
  public static let OUTDOOR_SEARCH: Swift.String
  public static let OUTDOOR_SEARCH_ITEM: Swift.String
  public static let OUTDOOR_EXPLORE_LIST: Swift.String
  public static let OUTDOOR_STORE_PROPERTY_LIST: Swift.String
  public static let OUTDOOR_FEED_PROPERTY_LIST: Swift.String
  public static let OUTDOOR_CATEGORY_SEARCH_ENTITY_LIST: Swift.String
  public static let INDOOR_HOME: Swift.String
  public static let INDOOR_CATEGORY_LIST: Swift.String
  public static let INDOOR_CATEGORY_ITEM: Swift.String
  public static let INDOOR_EXPLORE_LIST: Swift.String
  public static let INDOOR_EXPLORE_ITEM: Swift.String
  public static let INDOOR_ITEM_FAVORITES: Swift.String
  public static let INDOOR_ITEM_RECENTS: Swift.String
  public static let INDOOR_FEED_LIST: Swift.String
  public static let INDOOR_FEED_ITEM: Swift.String
  public static let INDOOR_SEARCH: Swift.String
  public static let INDOOR_CATEGORY_SEARCH_ENTITY_LIST: Swift.String
  public static let INDOOR_SEARCH_ITEM: Swift.String
  public static let INDOOR_HOURS: Swift.String
  public static let INDOOR_BUILDING_LIST: Swift.String
  public static let MAP: Swift.String
  public static let MAP_SEARCH: Swift.String
  public static let MAP_ITINERARY: Swift.String
  public static let MAP_SELECT_ENTITY: Swift.String
  public static let MAP_SELECT_UNKNOWN_ENTITY: Swift.String
  public static let MAP_ROUTE_PREVIEW_MAP: Swift.String
  public static let MAP_ROUTE_PREVIEW_STEPS: Swift.String
  public static let MAP_ROUTING: Swift.String
  public static let MAP_ROUTING_DESTINATION_REACHED: Swift.String
  public static let MAP_ROUTE_OPTIONS: Swift.String
  public static let MAP_TAGS_CREATE: Swift.String
  public static let MAP_TAGS_LIST: Swift.String
  public static let MAP_TAGS_SELECTED: Swift.String
  public static let MAP_TAG_ROUTING: Swift.String
  public static let MAP_INFO: Swift.String
  public static let MAP_INFO_ATTRIBUTIONS: Swift.String
  public static let MAP_INFO_LEGAL: Swift.String
  public static let MAP_INFO_CONTACT_US: Swift.String
  public static let PROFILE: Swift.String
  public static let SETTINGS: Swift.String
  public static let TERMS_OF_SERVICE: Swift.String
  public static let PRIVACY_POLICY: Swift.String
  public static let ATTRIBUTION: Swift.String
  public static let FEEDBACK: Swift.String
  public static let WELCOME_PRIVACY_POLICY: Swift.String
  public static let WELCOME_TERMS: Swift.String
  public static let WELCOME_INTRO: Swift.String
  public static let PROPERTY_INFO: Swift.String
  public static let IN_APP_FEED_FRAGMENT: Swift.String
  public static let FORCE_UPDATE_DIALOG: Swift.String
  public static let GLOBAL_SEARCH_INDOOR: Swift.String
  public static let GLOBAL_SEARCH_OUTDOOR: Swift.String
  public static let LOGIN: Swift.String
  public static let CREATE_ACCOUNT: Swift.String
  public static let FORGOT_PASSWORD: Swift.String
}
public protocol NearbyPropertiesListener : AnyObject {
  func addNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  func removeNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
}
extension MapstedCore.MNRouteNode {
  public var instruction: Swift.String {
    get
  }
  public var allLandmarkEntityIds: [Swift.Int] {
    get
  }
  public func isEqualTo(node: MapstedCore.MNRouteNode) -> Swift.Bool
}
public protocol PropertyDownloadListener : AnyObject {
  func onSuccess(propertyId: Swift.Int)
  func onSuccess(propertyId: Swift.Int, buildingId: Swift.Int)
  func onFailureWithProperty(propertyId: Swift.Int)
  func onFailureWithBuilding(propertyId: Swift.Int, buildingId: Swift.Int)
  func onProgress(propertyId: Swift.Int, percentage: Swift.Float)
}
public struct Trigger : Swift.Codable {
  public let id: Swift.String
  public let location: MapstedCore.LocationInfo
  public let behaviour: MapstedCore.Behaviour?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LocationInfo : Swift.Codable {
  public let activationDelay: MapstedCore.ActivationDelay
  public let direction: Swift.String
  public let activationZone: Swift.String
  public let activationDistance: Swift.Float
  public let entities: [MapstedCore.HomeEntity]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ActivationDelay : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Behaviour : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SearchablesData : Swift.Identifiable {
  public let id: Foundation.UUID
  public var name: Swift.String
  public var displayName: Swift.String {
    get
  }
  public var entity: MapstedCore.MNSearchEntity? {
    get
  }
  public var logoImageUrl: Swift.String? {
    get
  }
  public var logoImageUid: Swift.String? {
    get
  }
  public var children: [MapstedCore.SearchablesData]
  public static func groupSearchables(list: [any MapstedCore.ISearchable]) -> [MapstedCore.SearchablesData]
  public typealias ID = Foundation.UUID
}
public protocol LocationControllerInterface {
  func hasInit() -> Swift.Bool
  func getCurrentZone() -> MapstedCore.MNZone?
  func getPosition() -> MapstedCore.MNPosition?
  func getNearbyEntities(completion: @escaping ([MapstedCore.EntityZoneDistance]) -> ())
  func getNearbyProperties() -> Swift.Set<Swift.Int>
  func addNearbyPropertiesListener(listener: any MapstedCore.NearbyPropertiesListener)
  func removeNearbyPropertiesListener(listener: any MapstedCore.NearbyPropertiesListener)
  func getValidBlueDotStatus() -> MapstedCore.EnumValidBlueDotError
  func addValidBlueDotStatusChangeListener(listener: any MapstedCore.ValidBlueDotCallbackListener)
  func removeValidBlueDotStatusChangeListener(listener: any MapstedCore.ValidBlueDotCallbackListener)
  func getValidBlueDotErrorType() -> MapstedCore.EnumValidBlueDotError
  func addPositionVisibilityListener(listener: any MapstedCore.PositionVisibilityListener)
  func removePositionVisibilityListener(listener: any MapstedCore.PositionVisibilityListener)
  func addPositionChangeListener(listener: any MapstedCore.PositionChangeListener)
  func removePositionChangeListener(listener: any MapstedCore.PositionChangeListener)
  func addPositionAnimationListener(listener: any MapstedCore.PositionAnimationListener)
  func removePositionAnimationListener(listener: any MapstedCore.PositionAnimationListener)
  func enableSnapBlueDotToRoute(enable: Swift.Bool)
  func isSnapBlueDotToRouteEnabled() -> Swift.Bool
  func getLastKnownPhoneHeading() -> Swift.Float?
  func addPhoneHeadingChangeListener(listener: any MapstedCore.PhoneHeadingChangeListener)
  func removePhoneHeadingChangeListener(listener: any MapstedCore.PhoneHeadingChangeListener)
  func addPhoneHeadingAccuracyChangeListener(listener: any MapstedCore.PhoneHeadingAccuracyChangeListener)
  func removePhoneHeadingAccuracyChangeListener(listener: any MapstedCore.PhoneHeadingAccuracyChangeListener)
  func getLastKnownPhoneHeadingAccuracy() -> MapstedCore.MNConfidence
  func getLastKnownUserHeading() -> Swift.Float?
  func addUserHeadingChangeListener(listener: any MapstedCore.UserHeadingChangeListener)
  func removeUserHeadingChangeListener(listener: any MapstedCore.UserHeadingChangeListener)
  func getLastKnownFusedUserHeading() -> Swift.Float?
  func addFusedUserHeadingChangeListener(listener: any MapstedCore.FusedUserHeadingChangeListener)
  func removeFusedUserHeadingChangeListener(listener: any MapstedCore.FusedUserHeadingChangeListener)
}
public protocol CoreInitCallback : AnyObject {
  func onSuccess()
  func onFailure(errorCode: MapstedCore.EnumSdkError)
  func onStatusUpdate(update: MapstedCore.EnumSdkUpdate)
  func onStatusMessage(messageType: MapstedCore.StatusMessageType)
}
@_hasMissingDesignatedInitializers public class FloorInfo {
  public init?(buildingId: Swift.Int, floorId: Swift.Int)
  public func getFloorId() -> Swift.Int
  public func getPropertyId() -> Swift.Int
  public func getBuildingId() -> Swift.Int
  public func getLongName() -> Swift.String
  public func getShortName() -> Swift.String
  public func getFloorNumber() -> Swift.Int
  @objc deinit
}
public enum ValidationType : Swift.Int {
  case UNKNOWN
  case NAVIGATION
  case CALIBRATION
  case WAYFINDING
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias AlertEventListener = MapstedCore.MapstedAlertDelegate
public protocol MapstedAlertDelegate : AnyObject {
  func onEmergencyAlert(alertId: Swift.String)
}
public enum CategoryType {
  case Global
  case Property
  public static func == (a: MapstedCore.CategoryType, b: MapstedCore.CategoryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CategoryTreeGlobal {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PropertyCategoryTree {
  @objc deinit
}
public class MNCategoryTree {
  public init()
  public init?(propertyId: Swift.Int)
  public func categoryMap() -> [Swift.String : MapstedCore.MNCategory]
  @objc deinit
}
extension MapstedCore.Category : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: MapstedCore.Category, rhs: MapstedCore.Category) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MNAssistedPositioningManager : ObjectiveC.NSObject {
  @objc public var prevZone: MapstedCore.MNZone? {
    @objc get
  }
  @objc public var newZone: MapstedCore.MNZone? {
    @objc get
  }
  @objc public var timestamp: Foundation.Date? {
    @objc get
  }
  @objc public var nearbyEntities: [Swift.Int] {
    @objc get
  }
  public var requestFloorChangeConfirm: Swift.Bool {
    get
  }
  public var nearbyEntitiesResponse: [Foundation.NSNumber]? {
    get
  }
  public func setZoneChangeConfirmation(expired: Swift.Bool)
  @objc deinit
}
public struct Campaign : Swift.Codable {
  public let id: Swift.String
  public let creatives: [MapstedCore.Creative]
  public let homeEntities: [MapstedCore.HomeEntity]?
  public let triggers: [MapstedCore.Trigger]?
  public let status: Swift.String
  public let createdAt: Swift.String
  public let updatedAt: Swift.String
  public let schedule: MapstedCore.Schedule
  public let activationDate: Swift.String
  public func inRecents(forSearch: Swift.Bool = false) -> Swift.Bool
  public func hasHomeEntity(withName entityName: Swift.String) -> Swift.Bool
  public var isActive: Swift.Bool {
    get
  }
  public static func dateToUTCString(from date: Foundation.Date = Date(), timeZone: Swift.String) -> Swift.String
  public static func dateFormatter(timeZone: Swift.String? = "UTC") -> Foundation.DateFormatter
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BridgeMNCoreNotificationManagerInterface {
  func postNotificationWithInfo(type: MapstedCore.MNCoreNotificationType, userInfo: [Swift.AnyHashable : Any]?)
  func postNotifications(_ type: MapstedCore.MNCoreNotificationType)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MapstedWaypoint : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func initialize(propertyId: Swift.Int, buildingId: Swift.Int, name: Swift.String, locations: [MapstedCore.MNMercatorZone], entityZones: [MapstedCore.MNEntityZone])
  @objc public func getPropertyId() -> Swift.Int
  @objc public func getBuildingId() -> Swift.Int
  @objc public func getName() -> Swift.String
  @objc public func clone() -> MapstedCore.MapstedWaypoint?
  @objc public func getEntityZones() -> [MapstedCore.MNEntityZone]?
  @objc public func getLocations() -> [MapstedCore.MNMercatorZone]
  @objc public func addLocation(location: MapstedCore.MNMercatorZone, name: Swift.String? = "")
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MNAtomicBoolean {
  public func get() -> Swift.Bool
  public func set(_ val: Swift.Bool)
  public func toggle()
  @objc deinit
}
@objc public protocol PositionAnimationListener {
  @objc func onPositionAnimation(position: MapstedCore.MNPosition, animationBegins: Swift.Bool)
}
public class SearchEntity {
  final public let groupName: Swift.String
  final public let entities: [MapstedCore.MNSearchEntity]
  public var logoImageBaseUrl: Swift.String? {
    get
  }
  public var logoImageUID: Swift.String? {
    get
  }
  public var isBuilding: Swift.Bool {
    get
  }
  public var categoryNames: [Swift.String] {
    get
  }
  public var subCategoryNames: [Swift.String] {
    get
  }
  public var categoryUids: [Swift.String?] {
    get
  }
  public var mapDataType: MapstedCore.MNDataType
  public init(groupName: Swift.String, mapDataType: MapstedCore.MNDataType, propertyId: Swift.Int, buildingId: Swift.Int = -1, entities: [MapstedCore.MNSearchEntity])
  public var isFavorite: Swift.Bool {
    get
  }
  public func inRecents(forSearch: Swift.Bool = false) -> Swift.Bool
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
  public var zoneLabels: [MapstedCore.MNZoneLabel] {
    get
  }
  public func getEntityWith(entityId: Swift.Int) -> MapstedCore.MNSearchEntity?
  @objc deinit
}
extension MapstedCore.SearchEntity : MapstedCore.CMSSearchable {
  public var image: UIKit.UIImage? {
    get
  }
  public var imageBaseUrlString: Swift.String? {
    get
  }
  public var imageIdString: Swift.String? {
    get
  }
  public var propertyId: Swift.Int {
    get
  }
  public var buildingId: Swift.Int {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public var categoryTags: [Swift.String] {
    get
  }
  public var categoryUid: Swift.String {
    get
  }
  public var subcategoryUids: [Swift.String] {
    get
  }
  public var categoryTagUids: [Swift.String] {
    get
  }
  public var locations: [MapstedCore.MNMercatorZone] {
    get
  }
  public var matchWord: (MapstedCore.MapstedCoreSearchApi.SearchableItemType, Swift.String) {
    get
    set
  }
  public func keywords() -> [Swift.String]
  public var buildingName: Swift.String {
    get
  }
  public var isMultiBuilding: Swift.Bool {
    get
  }
  public var toolTipName: Swift.String {
    get
  }
}
public protocol PoiCategoriesResult {
  func getAllCategories() -> [any MapstedCore.iCategory]
  func getRootCategories() -> [any MapstedCore.iCategory]
  func findById(uuid: Swift.String) -> (any MapstedCore.iCategory)?
  func findByName(name: Swift.String) -> [any MapstedCore.iCategory]
  func getChildCategories(uuid: Swift.String) -> [any MapstedCore.iCategory]
  func getDescendantCategories(uuid: Swift.String) -> [any MapstedCore.iCategory]
  func getParentCategories(uuid: Swift.String) -> [any MapstedCore.iCategory]
  func getAncestorCategories(uuid: Swift.String) -> [any MapstedCore.iCategory]
}
@_hasMissingDesignatedInitializers public class PropertyCategoriesResult : MapstedCore.PoiCategoriesResult {
  public func getAllCategories() -> [any MapstedCore.iCategory]
  public func getRootCategories() -> [any MapstedCore.iCategory]
  public func findById(uuid: Swift.String) -> (any MapstedCore.iCategory)?
  public func findByName(name: Swift.String) -> [any MapstedCore.iCategory]
  public func getChildCategories(uuid: Swift.String) -> [any MapstedCore.iCategory]
  public func getDescendantCategories(uuid: Swift.String) -> [any MapstedCore.iCategory]
  public func getParentCategories(uuid: Swift.String) -> [any MapstedCore.iCategory]
  public func getAncestorCategories(uuid: Swift.String) -> [any MapstedCore.iCategory]
  @objc deinit
}
public class Creative : Swift.Codable {
  final public let headline: [Swift.String : Swift.String]
  final public let title: [Swift.String : Swift.String]
  final public let body: [Swift.String : Swift.String]
  final public let negativeButtonAction: MapstedCore.CallToAction
  final public let positiveButtonAction: MapstedCore.CallToAction
  final public let id: Swift.String
  final public let images: [Swift.String : [MapstedCore.ImageInfo]]
  final public let icon: [Swift.String : MapstedCore.ImageInfo]?
  public var doesLike: Swift.Int?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct DeviceInfo {
}
public struct AppInformation {
  public let name: Swift.String
  public let version: Swift.String
  public var versionCode: Swift.Int {
    get
  }
  public func calculateVersionCode(from versionString: Swift.String) -> Swift.Int
}
extension MapstedCore.MNPrint {
  public static func cppPrint(_ string: Swift.String)
}
extension MapstedCore.MNMapEntity {
  public var textDescription: Swift.String {
    get
  }
}
public struct Schedule : Swift.Codable {
  public let activation: Swift.String
  public let start: Swift.String?
  public let end: Swift.String?
  public let timezone: Swift.String
  public var currentDate: Foundation.Date? {
    get
  }
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public typealias RequestRetryCompletion = (_ shouldRetry: Swift.Bool, _ timeDelay: Foundation.TimeInterval) -> Swift.Void
public protocol RequestRetrier {
  func should(_ manager: MapstedCore.SessionManager, retry request: MapstedCore.Request, with error: any Swift.Error, completion: @escaping MapstedCore.RequestRetryCompletion)
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
@_hasMissingDesignatedInitializers open class Request {
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  open var delegate: MapstedCore.TaskDelegate {
    get
  }
  open var task: Foundation.URLSessionTask? {
    get
  }
  final public let session: Foundation.URLSession
  open var request: Foundation.URLRequest? {
    get
  }
  open var response: Foundation.HTTPURLResponse? {
    get
  }
  open var retryCount: Swift.UInt {
    get
  }
  @discardableResult
  open func authenticate(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  open func authenticate(usingCredential credential: Foundation.URLCredential) -> Self
  open class func authorizationHeader(user: Swift.String, password: Swift.String) -> (key: Swift.String, value: Swift.String)?
  open func resume()
  open func suspend()
  open func cancel()
  @objc deinit
}
extension MapstedCore.Request : Swift.CustomStringConvertible {
  open var description: Swift.String {
    get
  }
}
extension MapstedCore.Request : Swift.CustomDebugStringConvertible {
  open var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataRequest : MapstedCore.Request {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  @discardableResult
  open func stream(closure: ((Foundation.Data) -> Swift.Void)? = nil) -> Self
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping MapstedCore.DataRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DownloadRequest : MapstedCore.Request {
  public struct DownloadOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt
    public static let createIntermediateDirectories: MapstedCore.DownloadRequest.DownloadOptions
    public static let removePreviousFile: MapstedCore.DownloadRequest.DownloadOptions
    public init(rawValue: Swift.UInt)
    public typealias ArrayLiteralElement = MapstedCore.DownloadRequest.DownloadOptions
    public typealias Element = MapstedCore.DownloadRequest.DownloadOptions
    public typealias RawValue = Swift.UInt
  }
  public typealias DownloadFileDestination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: MapstedCore.DownloadRequest.DownloadOptions)
  override open var request: Foundation.URLRequest? {
    get
  }
  open var resumeData: Foundation.Data? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  override open func cancel()
  open func cancel(createResumeData: Swift.Bool)
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping MapstedCore.DownloadRequest.ProgressHandler) -> Self
  open class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask) -> MapstedCore.DownloadRequest.DownloadFileDestination
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class UploadRequest : MapstedCore.DataRequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var uploadProgress: Foundation.Progress {
    get
  }
  @discardableResult
  open func uploadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping MapstedCore.UploadRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
open class StreamRequest : MapstedCore.Request {
  @objc deinit
}
extension Foundation.Date {
  public static var UTCFormatter: Foundation.DateFormatter {
    get
  }
  public var rruleString: Swift.String {
    get
  }
  public var utcString: Swift.String {
    get
  }
  public var utcDate: Foundation.Date? {
    get
  }
  public var startOfDayUTC: Foundation.Date {
    get
  }
  public var startOfDay: Foundation.Date {
    get
  }
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : MapstedCore.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : MapstedCore.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : MapstedCore.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension MapstedCore.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : MapstedCore.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod, headers: MapstedCore.HTTPHeaders? = nil) throws
}
@discardableResult
public func request(_ url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .get, parameters: MapstedCore.Parameters? = nil, encoding: any MapstedCore.ParameterEncoding = URLEncoding.default, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.DataRequest
@discardableResult
public func request(_ urlRequest: any MapstedCore.URLRequestConvertible) -> MapstedCore.DataRequest
@discardableResult
public func download(_ url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .get, parameters: MapstedCore.Parameters? = nil, encoding: any MapstedCore.ParameterEncoding = URLEncoding.default, headers: MapstedCore.HTTPHeaders? = nil, to destination: MapstedCore.DownloadRequest.DownloadFileDestination? = nil) -> MapstedCore.DownloadRequest
@discardableResult
public func download(_ urlRequest: any MapstedCore.URLRequestConvertible, to destination: MapstedCore.DownloadRequest.DownloadFileDestination? = nil) -> MapstedCore.DownloadRequest
@discardableResult
public func download(resumingWith resumeData: Foundation.Data, to destination: MapstedCore.DownloadRequest.DownloadFileDestination? = nil) -> MapstedCore.DownloadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, to url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .post, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.UploadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, with urlRequest: any MapstedCore.URLRequestConvertible) -> MapstedCore.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, to url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .post, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, with urlRequest: any MapstedCore.URLRequestConvertible) -> MapstedCore.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, to url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .post, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, with urlRequest: any MapstedCore.URLRequestConvertible) -> MapstedCore.UploadRequest
public func upload(multipartFormData: @escaping (MapstedCore.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .post, headers: MapstedCore.HTTPHeaders? = nil, encodingCompletion: ((MapstedCore.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
public func upload(multipartFormData: @escaping (MapstedCore.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: any MapstedCore.URLRequestConvertible, encodingCompletion: ((MapstedCore.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(withHostName hostName: Swift.String, port: Swift.Int) -> MapstedCore.StreamRequest
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(with netService: Foundation.NetService) -> MapstedCore.StreamRequest
@_spi(AlertsPrivateApi) public protocol AlertControllerInterface {
  @_spi(AlertsPrivateApi) func add(alertJson: Swift.String)
  @_spi(AlertsPrivateApi) func remove(propertyId: Swift.Int, alertId: Swift.String)
  @_spi(AlertsPrivateApi) func removeAll(propertyId: Swift.Int)
  @_spi(AlertsPrivateApi) func addListener(_ object: any MapstedCore.MapstedAlertDelegate)
  @_spi(AlertsPrivateApi) func removeListener(_ object: any MapstedCore.MapstedAlertDelegate)
  @_spi(AlertsPrivateApi) func sendFirebaseToken(token: Swift.String, appPackageName: Swift.String)
}
@_spi(AlertsPrivateApi) @_hasMissingDesignatedInitializers public class AlertsManager : MapstedCore.AlertControllerInterface {
  @_spi(AlertsPrivateApi) public static let shared: any MapstedCore.AlertControllerInterface
  @_spi(AlertsPrivateApi) public func add(alertJson: Swift.String)
  @_spi(AlertsPrivateApi) public func remove(propertyId: Swift.Int, alertId: Swift.String)
  @_spi(AlertsPrivateApi) public func removeAll(propertyId: Swift.Int)
  @_spi(AlertsPrivateApi) public func addListener(_ object: any MapstedCore.MapstedAlertDelegate)
  @_spi(AlertsPrivateApi) public func removeListener(_ object: any MapstedCore.MapstedAlertDelegate)
  @_spi(AlertsPrivateApi) public func sendFirebaseToken(token: Swift.String, appPackageName: Swift.String)
  @_spi(AlertsPrivateApi) @objc deinit
}
public enum MapEntityType {
  case Property
  case PropertyEntity
  case Building
  case BuildingEntity
  case Unknown
  public static func == (a: MapstedCore.MapEntityType, b: MapstedCore.MapEntityType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MapstedCore.MNMapEntity {
  convenience public init?(dataType: MapstedCore.MNDataType, propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int)
  convenience public init?(dataType: MapstedCore.MNDataType, searchEntity: MapstedCore.MNSearchEntity)
  public var entityInfo: MapstedCore.CMSEntityInfo? {
    get
  }
  public var name: Swift.String {
    get
  }
  public var nameEnglish: Swift.String {
    get
  }
  public var isSearchable: Swift.Bool {
    get
  }
  public var categoryUid: Swift.String {
    get
  }
  public var searchItemIds: [Swift.Int] {
    get
  }
  public var hasText: Swift.Bool {
    get
  }
  public var useText: Swift.Bool? {
    get
  }
  public var textLocation: MapstedCore.MNMercatorZone? {
    get
  }
  public var textRotation: Swift.Float {
    get
  }
  public var freeRotation: Swift.Bool {
    get
  }
  public var hasIcon: Swift.Bool {
    get
  }
  public var useIcon: Swift.Bool? {
    get
  }
  public var iconImageBaseUrl: Swift.String {
    get
  }
  public var iconImageId: Swift.String {
    get
  }
  public var iconImageLight: Swift.String {
    get
  }
  public var iconImageDark: Swift.String {
    get
  }
  public var iconImageUrl: Swift.String? {
    get
  }
  public var iconLocation: MapstedCore.MNMercatorZone? {
    get
  }
  public var iconSize: Swift.Float {
    get
  }
  public var iconRotation: Swift.Float? {
    get
  }
}
extension MapstedCore.MNMapEntity {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers public class CMSManager : ObjectiveC.NSObject {
  @objc public static let shared: MapstedCore.CMSManager
  public func fetchStoreLogo(propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int) -> (Swift.String?, Swift.String?)
  public func addDefaultPropertyMapIcons(propertyId: Swift.Int, mapIcons: [MapstedCore.CMSDefaultIconStyle])
  public static func getLanguageCode() -> Swift.String
  public static func getDefaultLanguageCode() -> Swift.String
  public static func inRecents(propertyId: Swift.Int, buildingId: Swift.Int, byName name: Swift.String, forSearch: Swift.Bool = false) -> Swift.Bool
  public static func fetchRecents(propertyIds: [Swift.Int], inSearch: Swift.Bool = false, completion: @escaping ([MapstedCore.CMSSearchResultInfo]?) -> ())
  public static func fetchForCategory(propertyId: Swift.Int, buildingId: Swift.Int, entityIds: [Swift.Int], categoryName: Swift.String, completion: @escaping ([MapstedCore.CMSSearchResultInfo]?) -> ())
  @objc public static func checkPropertyStatus(_ id: Swift.Int, completed: @escaping ((Swift.Bool) -> Swift.Void))
  public func getEntityIdByBuildingId(propertyId: Swift.Int, buildingId: Swift.Int) -> Swift.Int?
  public static func getCategoryTree(propertyId: Swift.Int) -> MapstedCore.CMSCategoryTree?
  public static func getCategoryTreeGlobal() -> MapstedCore.CMSCategoryTree?
  public static func getCategories(propertyId: Swift.Int) -> MapstedCore.CMSCategories?
  public static func getCategoryTree() -> MapstedCore.MNCategoryTree
  public func getCategoriesForProperty(propertyId: Swift.Int) -> [Swift.String : MapstedCore.CMSCategory]
  public func getDefaultStyleIconsForProperty(propertyId: Swift.Int) -> [Swift.String : MapstedCore.CMSDefaultIconStyle]
  public func getHoursForProperty(propertyId: Swift.Int) -> [MapstedCore.MNDailyBusinessHour]
  @objc override dynamic public init()
  @objc deinit
}
extension MapstedCore.CMSManager {
  public func performGlobalCategorySearch(propertyIds: [Swift.Int], categoryName: Swift.String, completion: (([MapstedCore.CMSSearchResultInfo]?) -> Swift.Void)? = nil)
  public func performGlobalSearch(propertyIds: [Swift.Int], lookup: Swift.String, completion: (([MapstedCore.CMSSearchResultInfo]?) -> Swift.Void)? = nil)
}
extension MapstedCore.CMSManager {
  public static func fetchDestinationInstructionEntity(propertyId: Swift.Int) -> MapstedCore.DestinationInstructionsEntity?
  public static func fetchEntityFromDestinationInstructions(entityId: Swift.Int, buildingId: Swift.Int, propertyId: Swift.Int) -> MapstedCore.RoutingMessageEntity?
}
extension MapstedCore.CMSManager : MapstedCore.BridgeCMSManagerInterface {
  public func getSearchEntityForProperty(_ propertyId: Swift.Int, entityId: Swift.Int) -> MapstedCore.MapstedSearchEntity
  public func getSearchEntityForBuilding(propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int) -> MapstedCore.MapstedSearchEntity
  public func getPropertySearchEntities(_ propertyId: Swift.Int) -> MapstedCore.PropertySearchEntities
  public func getPropertyWebsite(_ propertyId: Swift.Int) -> Swift.String
  public func getPropertyPhoneNumber(_ propertyId: Swift.Int) -> Swift.String
  public func getPropertyImageUid(_ propertyId: Swift.Int) -> Swift.String
  public func fetchPropertyInfos(_ id: Swift.Int, syncCheck: Swift.Bool)
  public func deserializeBuildingData(propertyId: Swift.Int, buildingId: Swift.Int)
  public func getLayerStyle()
  public func getBuildingSearchEntities(propertyId: Swift.Int, buildingId: Swift.Int) -> MapstedCore.BuildingSearchEntities
  public func getBuildingEntityCategoryUid(_ buildingId: Swift.Int, entityId: Swift.Int) -> Swift.String
  public func getBuildingEntityCategoryName(_ buildingId: Swift.Int, entityId: Swift.Int) -> Swift.String
}
open class MNNetworkRequestBase {
  public init()
  open func parameters() -> [Swift.String : Any]
  @objc deinit
}
extension Swift.String {
  public var isNotEmpty: Swift.Bool {
    get
  }
  public func localized(_ lang: Swift.String? = "en", defaultString: Swift.String = "") -> Swift.String
  public func localized(_ defaultString: Swift.String) -> Swift.String
  public func getCountryCode() -> Swift.String?
}
extension Swift.String {
  public subscript(offset: Swift.Int) -> Swift.Character {
    get
  }
}
extension Swift.String {
  public var timeZoneFullName: Swift.String? {
    get
  }
}
@objc public enum MNCoreNotificationType : Swift.Int {
  case initialized
  case building
  case nearBuilding
  case entity
  case location
  case routing
  case sign
  case activity
  case banner
  case nearbyEntities
  case selectNearbyEntityRequest
  case zoneChange
  case bluetooth
  case licence
  case imageFetched
  case dataDownloadProgress
  case buildingDataDeserialized
  case propertyDataDeserialized
  case marketing
  case shareLocation
  case analytics
  case propertyCategoryUpdated
  case globalCategoriesUpdated
  case propertyUpdated
  case dataCaptureUpdated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class MNCoreNotificationManager : ObjectiveC.NSObject {
  @objc public static let main: MapstedCore.MNCoreNotificationManager
  public enum objKey : Swift.String {
    case buildingId
    case propertyId
    case dataId
    case requestType
    case progress
    case timestamp
    case prevZone
    case newZone
    case nearbyEntityList
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func addObserverAndPost(type: MapstedCore.MNCoreNotificationType, observer: Swift.AnyObject, selector: ObjectiveC.Selector)
  public func addObserver(type: MapstedCore.MNCoreNotificationType, observer: Swift.AnyObject, selector: ObjectiveC.Selector)
  public func removeAllObservers(observer: Swift.AnyObject)
  public func removeObserver(type: MapstedCore.MNCoreNotificationType, observer: Swift.AnyObject)
  @objc override dynamic public init()
  @objc deinit
}
extension MapstedCore.MNCoreNotificationManager : MapstedCore.BridgeMNCoreNotificationManagerInterface {
  public func postNotificationWithInfo(type: MapstedCore.MNCoreNotificationType, userInfo: [Swift.AnyHashable : Any]?)
  public func postNotifications(_ type: MapstedCore.MNCoreNotificationType)
}
@_spi(LocMarketingPrivateApi) public protocol LocMarketingControllerInterface {
  @_spi(LocMarketingPrivateApi) func addListener(listener: any MapstedCore.LocMarketingEventListener)
  @_spi(LocMarketingPrivateApi) func removeListener(listener: any MapstedCore.LocMarketingEventListener)
}
@_spi(LocMarketingPrivateApi) @_hasMissingDesignatedInitializers public class MarketingController : MapstedCore.LocMarketingControllerInterface {
  @_spi(LocMarketingPrivateApi) public static let shared: MapstedCore.MarketingController
  @_spi(LocMarketingPrivateApi) public func addListener(listener: any MapstedCore.LocMarketingEventListener)
  @_spi(LocMarketingPrivateApi) public func removeListener(listener: any MapstedCore.LocMarketingEventListener)
  @_spi(LocMarketingPrivateApi) @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CMSEntityInfo : ObjectiveC.NSObject {
  public var propertyId: Swift.Int
  public var buildingId: Swift.Int
  public var floorId: Swift.Int
  public var entityId: Swift.Int
  public var syncId: Swift.String
  public var englishName: Swift.String
  public var longName: Swift.String
  public var shortName: Swift.String
  public var descriptionText: Swift.String?
  public var website: Swift.String?
  public var phoneNumber: Swift.String?
  public var coverImages: [Swift.String] {
    get
    set
  }
  public var useIcon: Swift.Bool?
  public var useText: Swift.Bool?
  public var imageBaseUrl: Swift.String?
  public var iconImage: Swift.String?
  public var iconLight: Swift.String?
  public var iconDark: Swift.String?
  public var timeZoneName: Swift.String?
  public var timeZoneOffset: Swift.Int?
  public var socialMedia: [Swift.String : Swift.String?]?
  public var twitterLink: Swift.String {
    get
  }
  public var facebookLink: Swift.String {
    get
  }
  public var instagramLink: Swift.String {
    get
  }
  public var iconImageUrl: Swift.String? {
    get
  }
  public var categoryName: Swift.String
  public var categoryImageId: Swift.String
  public var category: MapstedCore.CMSCategoryInfo?
  public var subCategories: [MapstedCore.CMSCategoryInfo]?
  public var subCategoryNames: [Swift.String]
  public var floorName: Swift.String {
    get
  }
  public var floorNameShort: Swift.String {
    get
  }
  public var textLocation: (Swift.Double, Swift.Double)?
  public var textRotation: Swift.Float
  public var iconLocation: (Swift.Double, Swift.Double)?
  public var iconRotation: Swift.Float? {
    get
    set
  }
  public var iconSize: Swift.Float
  public var iconId: Swift.String
  public var mapIcons: [Swift.String : MapstedCore.CMSDefaultIconStyle]
  public var freeRotation: Swift.Bool
  public var keywords: [Swift.String]
  public func getOpeningHours() -> [MapstedCore.MNDailyBusinessHour]?
  public func getBusinessHours() -> MapstedCore.WeeklyBusinessHours?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MNCategory {
  final public let guid: Swift.String
  final public let propertyId: Swift.Int?
  public func name() -> Swift.String
  public func imageGuid() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CMSBuildingInfo : MapstedCore.CMSEntityInfo {
  public var floorInfoMap: [Swift.Int : MapstedCore.CMSFloorInfo]
  public func addFloorInfo(floorInfo: MapstedCore.CMSFloorInfo)
  public func getFloorInfo(floorId: Swift.Int) -> MapstedCore.CMSFloorInfo?
  public func addStoreInfo(storeInfo: MapstedCore.CMSStoreInfo)
  @objc deinit
}
public struct CMSFloorInfo {
  public var propertyId: Swift.Int
  public var buildingId: Swift.Int
  public var floorId: Swift.Int
  public var longName: Swift.String
  public var shortName: Swift.String
  public var floorNumber: Swift.Int
  public var defaultName: Swift.String {
    get
  }
}
public protocol AnalyticsControllerInterface {
  func updateScreen(currentSreen: Swift.String)
  func updateScreen(currentScreen: Swift.String, bundleContent: MapstedCore.MNAnalyticsBundle)
  func addSearchEvent(searchBarId: Swift.String, searchString: Swift.String, selectedString: Swift.String, bundleContent: MapstedCore.MNAnalyticsBundle)
  func addMarketingEvent(eventType: MapstedCore.MapstedMarketingEventType, campaignId: Swift.String, interactionType: MapstedCore.MapstedMarketingInteractionType)
  func addMapEvent(eventType: MapstedCore.MapstedMapAnalyticsActionType, wayPoint: any MapstedCore.Searchable)
  func setAnalyticsEmail(email: Swift.String)
}
public protocol ConfigControllerInterface {
  func getSdkMode() -> MapstedCore.EnumSdkMode
  func getDeviceInfo() -> MapstedCore.DeviceInfo
  func getLanguageCode() -> Swift.String
  func setCode(languageCode: Swift.String)
}
public struct DefaultDataResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let error: (any Swift.Error)?
  public let timeline: MapstedCore.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?, timeline: MapstedCore.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DataResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let result: MapstedCore.Result<Value>
  public let timeline: MapstedCore.Timeline
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, result: MapstedCore.Result<Value>, timeline: MapstedCore.Timeline = Timeline())
}
extension MapstedCore.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension MapstedCore.DataResponse {
  public func map<T>(_ transform: (Value) -> T) -> MapstedCore.DataResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> MapstedCore.DataResponse<T>
  public func mapError<E>(_ transform: (any Swift.Error) -> E) -> MapstedCore.DataResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (any Swift.Error) throws -> E) -> MapstedCore.DataResponse<Value> where E : Swift.Error
}
public struct DefaultDownloadResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let error: (any Swift.Error)?
  public let timeline: MapstedCore.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, error: (any Swift.Error)?, timeline: MapstedCore.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DownloadResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let result: MapstedCore.Result<Value>
  public let timeline: MapstedCore.Timeline
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, result: MapstedCore.Result<Value>, timeline: MapstedCore.Timeline = Timeline())
}
extension MapstedCore.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension MapstedCore.DownloadResponse {
  public func map<T>(_ transform: (Value) -> T) -> MapstedCore.DownloadResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> MapstedCore.DownloadResponse<T>
  public func mapError<E>(_ transform: (any Swift.Error) -> E) -> MapstedCore.DownloadResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (any Swift.Error) throws -> E) -> MapstedCore.DownloadResponse<Value> where E : Swift.Error
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension MapstedCore.DefaultDataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension MapstedCore.DataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension MapstedCore.DefaultDownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension MapstedCore.DownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class BuildingSearchEntity : MapstedCore.MapstedSearchEntity {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PropertySearchEntity : MapstedCore.MapstedSearchEntity {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MapstedSearchEntity : ObjectiveC.NSObject {
  @objc public var propertyId: Swift.Int
  @objc public var buildingId: Swift.Int
  @objc public var floorId: Swift.Int
  @objc public var entityId: Swift.Int
  @objc final public let mapDataType: MapstedCore.MNDataType
  @objc deinit
}
extension MapstedCore.MapstedSearchEntity : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public protocol LicenceControllerInterface {
  func getId() -> Swift.String?
  func getStatus() -> MapstedCore.MNLicenceStatus?
  func addListener(_ object: any MapstedCore.LicenceStatusListener)
  func removeListener(_ object: any MapstedCore.LicenceStatusListener)
}
public enum DeepLinkConcern {
  case Routing
  case Select
  case Alert
  case Emergency
  public var path: Swift.String {
    get
  }
  public static func == (a: MapstedCore.DeepLinkConcern, b: MapstedCore.DeepLinkConcern) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DeepLinkParameter {
  case PropertyId
  case BuildingId
  case FloorId
  case EntityId
  case AlertId
  case AlertStatus
  case AlertJsonData
  public var name: Swift.String {
    get
  }
  public static func == (a: MapstedCore.DeepLinkParameter, b: MapstedCore.DeepLinkParameter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MNDeepLinkDelegate : AnyObject {
  func processDeepLink(path: Swift.String, params: [Foundation.URLQueryItem]?, completion: ((Swift.Bool) -> Swift.Void)?)
  func processDeepLink(uri: Foundation.URL, completion: ((Swift.Bool) -> Swift.Void)?)
}
@objc public protocol PhoneHeadingChangeListener {
  @objc func onPhoneHeadingChanged(headingRad: CoreFoundation.CGFloat)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
@objc @_inheritsConvenienceInitializers public class MNNetworkManager : ObjectiveC.NSObject {
  final public let url: MapstedCore.MNUrlManager
  public func setup()
  public func getPropertyAndCategorySync() -> Swift.Bool
  public func cmsFetchPropertyCategories(propertyIds: [Swift.Int], dispatchGroup: Dispatch.DispatchGroup)
  public func fetchLastestSyncId(propertyId: Swift.Int) -> Swift.Bool
  public func cmsFetchPropertyLatestSyncId(propertyId: Swift.Int, completion: @escaping ((Swift.String?) -> Swift.Void))
  public func cmsGlobalSearchCategories(propertyIds: [Swift.Int], categoryName: Swift.String, completion: (([MapstedCore.CMSSearchResultInfo]?) -> Swift.Void)? = nil)
  public func cmsGlobalSearch(propertyIds: [Swift.Int], lookup: Swift.String, completion: (([MapstedCore.CMSSearchResultInfo]?) -> Swift.Void)? = nil)
  public func cmsFetchPropertyInfoBatch(propertyIds: [Swift.Int], completion: (([MapstedCore.CMSPropertyInfo]?) -> Swift.Void)? = nil)
  public func cmsFetchPropertyInfo(propertyId: Swift.Int, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func cmsFetchHolidays(year: Swift.Int, countryCode: Swift.String, completion: (([Swift.String : [Swift.String : Swift.String]]?) -> Swift.Void)? = nil)
  public func cmsFetchBuildingData(propertyId: Swift.Int, buildingId: Swift.Int, syncCheck: Swift.Bool = false) -> Swift.Bool
  public func cmsFetchPropertyCategoryTree(propertyId: Swift.Int, completion: ((MapstedCore.CMSCategoryTree?) -> Swift.Void)? = nil)
  public func getPropertyInfosSync() -> Swift.Bool
  public func cmsGetDestinationInstruction(propertyId: Swift.Int, completion: @escaping ((Swift.Bool) -> Swift.Void))
  public func cmsOnlineSearch(propertyId: Swift.Int, text: Swift.String, lang: Swift.String, page: Swift.Int, limit: Swift.Int, completion: ((MapstedCore.CMSOnlineSearchResultInfo?) -> Swift.Void)? = nil)
  public func getPropertyInfosAsync(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func getPropertyMetaDataAsync(propertyId: Swift.Int, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func getBuildingData(buildingId: Swift.Int, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func getPropertyCategoryTree(propertyId: Swift.Int, completion: ((MapstedCore.CMSCategoryTree?) -> Swift.Void)? = nil)
  public func getBuildingDataForProperty(propertyId: Swift.Int, buildingId: Swift.Int, syncCheck: Swift.Bool, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func fetchDataForDataCapture(DataCaptureId: Swift.Int, completion: @escaping ((Foundation.Data?) -> Swift.Void))
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MNAtomicDictionary<Key, Value> where Key : Swift.Hashable, Value : Swift.Hashable {
  public func insertOrUpdate(key: Key, value: Value)
  public func getValue(forKey: Key) -> Value?
  public func removeValue(forKey: Key)
  public func getKeys() -> [Key]
  @objc deinit
}
public protocol SensorDataControllerInterface {
  func getMissingSensors() -> [Swift.String]
  func getSensorAccuracy(sensorType: MapstedCore.EnumSensorType) -> Swift.Int?
  func addMissingSensorsListener(listener: any MapstedCore.MissingSensorsListener)
  func removeMissingSensorsListener(listener: any MapstedCore.MissingSensorsListener)
  func addSensorAccuracyListener(listener: any MapstedCore.SensorAccuracyListener, sensorType: MapstedCore.EnumSensorType)
  func removeSensorAccuracyListener(listener: any MapstedCore.SensorAccuracyListener, sensorType: MapstedCore.EnumSensorType)
}
public enum FileSentType : Swift.Int16 {
  case unsent
  case sent
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
public struct MNLicenceFile : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PropertyAction {
  case Delete
  case Unload
  public static func == (a: MapstedCore.PropertyAction, b: MapstedCore.PropertyAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PropertyActionCompleteListener : AnyObject {
  func completed(action: MapstedCore.PropertyAction, propertyId: Swift.Int, sucessfully: Swift.Bool, error: (any Swift.Error)?)
}
public protocol GeofenceEventListener : AnyObject {
  func onGeofenceEvent(propertyId: Swift.Int, triggerId: Swift.String)
}
public struct CMS {
  @objc @_inheritsConvenienceInitializers public class EntityInfo : ObjectiveC.NSObject {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_hasMissingDesignatedInitializers public class PropertyInfo : MapstedCore.CMS.EntityInfo {
    public var categories: [Swift.String : MapstedCore.CMSCategory]
    public var categoryTree: MapstedCore.CMSCategoryTree?
    @objc deinit
  }
  @objc @_hasMissingDesignatedInitializers public class BuildingInfo : MapstedCore.CMS.EntityInfo {
    public func storeEntities() -> [Swift.Int : MapstedCore.CMS.StoreInfo]
    public func addStoreDOInfo(storeInfo: MapstedCore.CMS.StoreInfo)
    public func addStores(stores: [MapstedCore.CMS.StoreInfo])
    public func addFloorInfo(floorInfo: MapstedCore.CMSFloorInfo)
    public func getFloorInfo(floorId: Swift.Int) -> MapstedCore.CMSFloorInfo?
    @objc deinit
  }
  @objc @_hasMissingDesignatedInitializers public class StoreInfo : MapstedCore.CMS.EntityInfo {
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers open class MNNetworkUtils {
  public static func requestGetSync(url: Swift.String) -> Foundation.Data?
  public static func requestPostSyncWithStatus(url: Swift.String, parameters: [Swift.String : Any]) -> (Foundation.Data?, Swift.Int?)
  public static func requestPostSync(url: Swift.String, parameters: [Swift.String : Any]) -> Foundation.Data?
  public static func requestPostAsync(url: Swift.String, parameters: [Swift.String : Any], progress: ((Swift.Int) -> ())? = nil, response: ((Foundation.Data?) -> ())? = nil)
  public static func requestGetAsync(url: Swift.String, parameters: [Swift.String : Any]?, progress: ((Swift.Int) -> ())? = nil, response: ((Foundation.Data?) -> ())? = nil)
  public static func login(url: Swift.String, email: Swift.String, password: Swift.String) -> Swift.String?
  public static func loginForProperty(url: Swift.String, email: Swift.String, password: Swift.String) -> Swift.String?
  public static func getLicenceFromServerSync(url: Swift.String, licenceId: Swift.String, userName: Swift.String) -> Swift.String?
  public static func licenceValidationSync(url: Swift.String, file: MapstedCore.MNLicenceFile) -> Swift.String?
  public static func checkForSuccess(statusCode: Swift.Int?) -> Swift.Bool
  @objc deinit
}
extension MapstedCore.MNNetworkUtils {
  public static func requestPostAsync<T>(url: Swift.String, method: Swift.String = "POST", parameters: [Swift.String : Any], handler: ((T?, (any Swift.Error)?, Foundation.HTTPURLResponse?) -> Swift.Void)?) where T : Swift.Decodable
  public static func requestGetAsync(url: Swift.String, parameters: [Swift.String : Any], completed: ((Foundation.Data?) -> ())? = nil)
}
extension MapstedCore.SessionManager {
  public static let defaultWithCachePolicy: MapstedCore.SessionManager
}
@discardableResult
public func requestWithCachPolicy(_ url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .get, parameters: MapstedCore.Parameters? = nil, encoding: any MapstedCore.ParameterEncoding = URLEncoding.default, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.DataRequest
public struct Timeline {
  public let requestStartTime: CoreFoundation.CFAbsoluteTime
  public let initialResponseTime: CoreFoundation.CFAbsoluteTime
  public let requestCompletedTime: CoreFoundation.CFAbsoluteTime
  public let serializationCompletedTime: CoreFoundation.CFAbsoluteTime
  public let latency: Foundation.TimeInterval
  public let requestDuration: Foundation.TimeInterval
  public let serializationDuration: Foundation.TimeInterval
  public let totalDuration: Foundation.TimeInterval
  public init(requestStartTime: CoreFoundation.CFAbsoluteTime = 0.0, initialResponseTime: CoreFoundation.CFAbsoluteTime = 0.0, requestCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0, serializationCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0)
}
extension MapstedCore.Timeline : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MapstedCore.Timeline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public protocol LicenceStatusListener : AnyObject {
  func statusChanged(_ to: MapstedCore.MNLicenceStatus)
}
extension MapstedCore.MNBuildingSearchEntities {
  @objc dynamic public func searchEntities() -> [MapstedCore.MNSearchEntity]
  @objc dynamic public func searchEntity(entityId: Swift.Int) -> MapstedCore.MNSearchEntity?
  public func searchEntitiesGrouped(matching homeEntities: [MapstedCore.HomeEntity]? = nil) -> [MapstedCore.SearchEntity]
}
@_hasMissingDesignatedInitializers open class MNStorageUtils {
  public static func clearLocalStorage()
  @objc deinit
}
public protocol MNMarketingDelegate : AnyObject {
  func onMarketing(event: MapstedCore.MNEvent)
}
@_hasMissingDesignatedInitializers open class MNCalcUtils {
  public static func distance(a: MapstedCore.MNMercator, b: MapstedCore.MNMercator) -> Swift.Double
  public static func distanceFrom(propertyInfo: MapstedCore.PropertyInfo) -> Swift.Double
  @objc deinit
}
@objc public protocol UserHeadingChangeListener {
  @objc func onUserHeadingChanged(headingRad: CoreFoundation.CGFloat)
}
@_hasMissingDesignatedInitializers open class MNImageUtils {
  public static func maskImageAndDecompress(image: UIKit.UIImage, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat) -> UIKit.UIImage?
  @objc deinit
}
@objc public class AnalyticsSessionInfo : ObjectiveC.NSObject {
  @objc public var appName: Swift.String
  @objc public var appVersion: Swift.String
  @objc public var modelName: Swift.String
  @objc public var logInEmail: Swift.String
  @objc public var cppVersion: Swift.String
  public init(appName: Swift.String, appVersion: Swift.String, modelName: Swift.String, logInEmail: Swift.String, cppVersion: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PropertyInfo {
  public init?(propertyId: Swift.Int)
  final public let propertyId: Swift.Int
  public func getPropertyId() -> Swift.Int
  public func getName() -> Swift.String
  public func getShortName() -> Swift.String
  public var textDescription: Swift.String {
    get
  }
  public var descriptionText: Swift.String {
    get
  }
  public func getFullAddress() -> Swift.String
  public func getCityName() -> Swift.String
  public func getCityId() -> Swift.String
  public func getPhoneNumber() -> Swift.String
  public func getWebsite() -> Swift.String
  public func getTimeZoneName() -> Swift.String?
  public func getCountryLongName() -> Swift.String
  public func getCountryShortName() -> Swift.String
  public func getImageBaseUrl() -> Swift.String
  public func getCoverImages() -> [Swift.String]
  public func getImageUid() -> Swift.String
  public func getCentroid() -> MapstedCore.MNMercator
  public func getNorthEastMostPoint() -> MapstedCore.MNMercator
  public func getSouthWestMostPoint() -> MapstedCore.MNMercator
  public func getBusinessHours() -> MapstedCore.WeeklyBusinessHours?
  public func addToRecents(isSearch: Swift.Bool = false)
  public func inRecents(forSearch: Swift.Bool = false) -> Swift.Bool
  public func addToFavorites()
  public func removeFromFavorites()
  public func getValidationType() -> Swift.Int
  public func getPropertyDataMaxVersion() -> Swift.Int
  public func getBuildingInfos() -> [MapstedCore.BuildingInfo]
  public func getDefaultBuildingId() -> Swift.Int
  @objc deinit
}
extension MapstedCore.PropertyInfo : MapstedCore.CMSSearchable {
  public var buildingId: Swift.Int {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public var categoryUid: Swift.String {
    get
  }
  public var image: UIKit.UIImage? {
    get
  }
  public var imageBaseUrlString: Swift.String? {
    get
  }
  public var imageIdString: Swift.String? {
    get
  }
  public var buildingName: Swift.String {
    get
  }
  public var categoryTags: [Swift.String] {
    get
  }
  public var categoryTagUids: [Swift.String] {
    get
  }
  public var locations: [MapstedCore.MNMercatorZone] {
    get
  }
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
  public var matchWord: (MapstedCore.MapstedCoreSearchApi.SearchableItemType, Swift.String) {
    get
    set
  }
  public func keywords() -> [Swift.String]
  public var entities: [MapstedCore.MNSearchEntity] {
    get
  }
  public var mapDataType: MapstedCore.MNDataType {
    get
    set
  }
  public var isBuilding: Swift.Bool {
    get
  }
  public var isMultiBuilding: Swift.Bool {
    get
  }
  public func getMapToReal() -> Swift.Double
  public var toolTipName: Swift.String {
    get
  }
  public func getMapTiles() -> MapstedCore.MapStyle
  public func isPointWithinLooseBoundary(mercator: MapstedCore.MNMercator) -> Swift.Bool
  public func getRadius() -> Swift.Double
}
@objc public protocol FusedUserHeadingChangeListener {
  @objc func onFusedUserHeadingChanged(headingRad: CoreFoundation.CGFloat)
}
open class MultipartFormData {
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  public var boundary: Swift.String
  public init()
  public func append(_ data: Foundation.Data, withName name: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, mimeType: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: MapstedCore.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MNTypeMeta {
  public enum imageType : Swift.String {
    case compressed
    case expanded
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BuildingInfo {
  public init?(buildingId: Swift.Int)
  public init?(propertyId: Swift.Int, buildingId: Swift.Int)
  public func getPropertyId() -> Swift.Int
  public func getBuildingId() -> Swift.Int
  public func getEntityId() -> Swift.Int
  public func getDefaultFloorId() -> Swift.Int
  public func getName() -> Swift.String
  public func getEnglishName() -> Swift.String?
  public func getLongName() -> Swift.String?
  public func getShortName() -> Swift.String?
  public func getKeywords() -> [Swift.String]
  public func getImageBaseUrl() -> Swift.String?
  public func getCoverImages() -> [Swift.String]?
  public func getImageId() -> Swift.String?
  public var descriptionText: Swift.String? {
    get
  }
  public func getPhoneNumber() -> Swift.String?
  public func getWebsite() -> Swift.String?
  public func getTimeHint() -> MapstedCore.DailyBusinessHours?
  public func getCentroid() -> MapstedCore.MNMercator
  public func getFloor(floorId: Swift.Int) -> MapstedCore.FloorInfo?
  public func getFloorInfos() -> [Swift.Int : MapstedCore.FloorInfo]
  public func getFloorIds() -> [Swift.Int]
  public func getBuildingDataMaxVersion() -> Swift.Int
  public func getValidationType() -> Swift.Int
  public var textDescription: Swift.String {
    get
  }
  public func addToRecents(isSearch: Swift.Bool = false)
  public func inRecents(forSearch: Swift.Bool = false) -> Swift.Bool
  public func addToFavorites()
  public func removeFromFavorites()
  public var isFavorite: Swift.Bool {
    get
    set
  }
  @objc deinit
}
public enum Result<Value> {
  case success(Value)
  case failure(any Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
extension MapstedCore.Result : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MapstedCore.Result : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension MapstedCore.Result {
  public init(value: () throws -> Value)
  public func unwrap() throws -> Value
  public func map<T>(_ transform: (Value) -> T) -> MapstedCore.Result<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> MapstedCore.Result<T>
  public func mapError<T>(_ transform: (any Swift.Error) -> T) -> MapstedCore.Result<Value> where T : Swift.Error
  public func flatMapError<T>(_ transform: (any Swift.Error) throws -> T) -> MapstedCore.Result<Value> where T : Swift.Error
  @discardableResult
  public func withValue(_ closure: (Value) throws -> Swift.Void) rethrows -> MapstedCore.Result<Value>
  @discardableResult
  public func withError(_ closure: (any Swift.Error) throws -> Swift.Void) rethrows -> MapstedCore.Result<Value>
  @discardableResult
  public func ifSuccess(_ closure: () throws -> Swift.Void) rethrows -> MapstedCore.Result<Value>
  @discardableResult
  public func ifFailure(_ closure: () throws -> Swift.Void) rethrows -> MapstedCore.Result<Value>
}
@_hasMissingDesignatedInitializers open class MNActivityManager {
  public static let shared: MapstedCore.MNActivityManager
  public enum ActivityType : Swift.String {
    case initialize
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var _activities: [MapstedCore.MNActivityManager.ActivityType : Swift.Bool]?
  public var isAnimating: Swift.Bool {
    get
  }
  public func update(type: MapstedCore.MNActivityManager.ActivityType)
  public func finished(type: MapstedCore.MNActivityManager.ActivityType)
  @objc deinit
}
@objc public protocol PropertyCompletionListener {
  @objc func onCompletion(propertyId: Swift.Int)
}
extension MapstedCore.DataRequest {
  public func response() -> MapstedCore.DefaultDataResponse
  public func response<T>(responseSerializer: T) -> MapstedCore.DataResponse<T.SerializedObject> where T : MapstedCore.DataResponseSerializerProtocol
  public func responseData() -> MapstedCore.DataResponse<Foundation.Data>
  public func responseJSON(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> MapstedCore.DataResponse<Any>
  public func responseString(encoding: Swift.String.Encoding? = nil) -> MapstedCore.DataResponse<Swift.String>
  public func responsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions = PropertyListSerialization.ReadOptions()) -> MapstedCore.DataResponse<Any>
}
extension MapstedCore.DownloadRequest {
  public func response() -> MapstedCore.DefaultDownloadResponse
  public func response<T>(responseSerializer: T) -> MapstedCore.DownloadResponse<T.SerializedObject> where T : MapstedCore.DownloadResponseSerializerProtocol
  public func responseData() -> MapstedCore.DownloadResponse<Foundation.Data>
  public func responseJSON(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> MapstedCore.DownloadResponse<Any>
  public func responseString(encoding: Swift.String.Encoding? = nil) -> MapstedCore.DownloadResponse<Swift.String>
  public func responsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions = PropertyListSerialization.ReadOptions()) -> MapstedCore.DownloadResponse<Any>
}
@_inheritsConvenienceInitializers @objc open class MNPrint : ObjectiveC.NSObject {
  public enum Module : Swift.String {
    case positioning
    case map
    case ui
    case app
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public enum Level : Swift.Int {
    case v
    case d
    case e
    case wtf
    public func raw() -> Swift.String
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func p(l: MapstedCore.MNPrint.Level, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, t: Swift.String)
  @objc public static func objcP(l: MapstedCore.MNPrint.Level, f: Swift.String, t: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension MapstedCore.MNTag {
  convenience public init?(name: Swift.String, tagId: Swift.Int, position: MapstedCore.MNPosition, timeStamp: Swift.Double)
  @objc dynamic public var propertyId: Swift.Int {
    @objc get
  }
  @objc dynamic public var buildingId: Swift.Int {
    @objc get
  }
  @objc dynamic public var floorId: Swift.Int {
    @objc get
  }
  public var name: Swift.String {
    get
  }
  public func updateName(_ name: Swift.String)
  public var buildingName: Swift.String {
    get
  }
  public var floorName: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public var categoryUid: Swift.String {
    get
  }
  public var categoryTags: [Swift.String] {
    get
  }
  public var categoryTagUids: [Swift.String] {
    get
  }
  public var location: MapstedCore.MNMercator {
    get
  }
  public var locations: [MapstedCore.MNMercatorZone] {
    get
  }
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
  public var matchWord: (MapstedCore.MapstedCoreSearchApi.SearchableItemType, Swift.String) {
    get
    set
  }
  public var timeDescription: Swift.String {
    get
    set
  }
}
extension MapstedCore.MNTag : MapstedCore.CMSSearchable {
  public var displayName: Swift.String {
    get
  }
  public var image: UIKit.UIImage? {
    get
  }
  public var imageBaseUrlString: Swift.String? {
    get
  }
  public var imageIdString: Swift.String? {
    get
  }
  public var isMultiBuilding: Swift.Bool {
    get
  }
  public var entities: [MapstedCore.MNSearchEntity] {
    get
  }
  public func keywords() -> [Swift.String]
  public func inRecents(forSearch: Swift.Bool) -> Swift.Bool
  public var mapDataType: MapstedCore.MNDataType {
    get
    set
  }
  public var isBuilding: Swift.Bool {
    get
  }
  public var toolTipName: Swift.String {
    get
  }
}
public enum MNNetworkRetryType : Swift.Int {
  case always
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class AngleCalc {
  public static let DEG_TO_RAD: Swift.Float
  public static let RAD_TO_DEG: Swift.Float
  public static func angleDiff(_ angle1: Swift.Float, _ angle2: Swift.Float) -> Swift.Float
  public static func angleDiffSigned(_ angle1: Swift.Double, _ angle2: Swift.Double) -> Swift.Double
  public static func mod2pi(_ someAngle: Swift.Double) -> Swift.Double
  @objc deinit
}
extension MapstedCore.MNPropertyData {
  public func getPropertyInfo() -> MapstedCore.PropertyInfo?
}
extension MapstedCore.MNRoute {
  public var startName: Swift.String {
    get
  }
  public var destinationName: Swift.String {
    get
  }
  public var isRoutingFromMyLocation: Swift.Bool {
    get
  }
  public func isStartAtUserLocation() -> Swift.Bool
}
public struct DestinationInstructionsEntity : Swift.Codable {
  public var propertyId: Swift.Int
  public var buildingRoutingMessages: [MapstedCore.BuildingRoutingMessages]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BuildingRoutingMessages : Swift.Codable {
  public var routingMessages: [MapstedCore.RoutingMessageEntity]
  public var buildingId: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RoutingMessageEntity : Swift.Codable {
  public var entityId: Swift.Int
  public var startMsg: Swift.String
  public var endMsg: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RoutingControllerInterface {
  func requestRoute(request: MapstedCore.MNRouteRequest, routingRequestCallback: any MapstedCore.RoutingRequestCallback)
  func startNavigation(route: MapstedCore.MNRoute, routingStatusCallback: any MapstedCore.RoutingStatusCallback)
  func stopNavigation()
  func requestEstimate(start: MapstedCore.MNSearchEntity, destination: MapstedCore.MNSearchEntity, routeOptions: MapstedCore.MNRouteOptions, completion: @escaping ((MapstedCore.MNRouteDistanceTime?) -> Swift.Void))
  func requestEstimateFromCurrentLocation(destination: MapstedCore.MNSearchEntity, routeOptions: MapstedCore.MNRouteOptions, completion: @escaping ((MapstedCore.MNRouteDistanceTime?) -> Swift.Void))
  func requestEstimateFromCurrentLocation(toMercatorZone mercatorZone: MapstedCore.MNMercatorZone, routeOptions: MapstedCore.MNRouteOptions, completion: @escaping ((MapstedCore.MNRouteDistanceTime?) -> Swift.Void))
  func requestEstimateFromCurrentLocation(toEntityZone entityZone: MapstedCore.MNEntityZone, routeOptions: MapstedCore.MNRouteOptions, completion: @escaping ((MapstedCore.MNRouteDistanceTime?) -> Swift.Void))
  func fetchDestinationInstructionEntity(propertyId: Swift.Int) -> MapstedCore.DestinationInstructionsEntity?
  func fetchEntityFromDestinationInstructions(entityId: Swift.Int, buildingId: Swift.Int, propertyId: Swift.Int) -> MapstedCore.RoutingMessageEntity?
}
extension MapstedCore.MNPropertySearchEntities {
  @objc dynamic public func searchEntities() -> [MapstedCore.MNSearchEntity]
  @objc dynamic public func searchEntity(entityId: Swift.Int) -> MapstedCore.MNSearchEntity?
  public func searchEntitiesGrouped(matching homeEntities: [MapstedCore.HomeEntity]? = nil) -> [MapstedCore.SearchEntity]
}
extension MapstedCore.CMS {
  public enum Section {
    case main
    public static func == (a: MapstedCore.CMS.Section, b: MapstedCore.CMS.Section) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class Item : Swift.Hashable {
    public var image: UIKit.UIImage!
    final public let url: Foundation.URL!
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: MapstedCore.CMS.Item, rhs: MapstedCore.CMS.Item) -> Swift.Bool
    convenience public init?(image: UIKit.UIImage, urlString: Swift.String)
    @objc deinit
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol MNInitDelegate : AnyObject {
  func initSuccess(buildingData: MapstedCore.MNBuildingData)
  func initFailed()
  func initCurrentPosition()
  func initFloorChange()
}
@_inheritsConvenienceInitializers @objc final public class BridgeMNCoreNotificationManager : ObjectiveC.NSObject {
  @objc public static func postNotificationWithInfo(type: MapstedCore.MNCoreNotificationType, userInfo: [Swift.AnyHashable : Any]?)
  @objc public static func postNotification(_ type: MapstedCore.MNCoreNotificationType)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIImage {
  public static func loadFromModule(imageName: Swift.String, inBundle bundle: Foundation.Bundle) -> UIKit.UIImage?
}
@_hasMissingDesignatedInitializers public class ImageFetcher {
  public static func savedImage(identifier: Swift.String) -> UIKit.UIImage?
  public static func fetchedImage(identifier: Swift.String) -> UIKit.UIImage?
  public static func fetchAsync(baseUrl: Swift.String, identifier: Swift.String, completion: @escaping ((UIKit.UIImage?, Swift.String) -> ()))
  @objc deinit
}
public enum EnumDataType : Swift.Int {
  case Positioning
  case Calibration
  case Analytics
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class MNUrlManager : ObjectiveC.NSObject {
  public func getRoot(dataType: MapstedCore.EnumDataType) -> Swift.String
  public func getCMSRoot(_ currentVersion: Swift.String = "v1") -> Swift.String
  public func getFilerRoot() -> Swift.String
  public func getFilerDataUrl() -> Swift.String
  public func getUrl(type: MapstedCore.MNRequestType) -> Swift.String
  @objc public func getAnalyticsUrl(type: MapstedCore.AnalyticsType) -> Swift.String
  @objc public func getPostLivePositionUrl() -> Swift.String
  @objc public func getDataCaptureURL() -> Swift.String
  @objc public func getPostUserFirebaseTokenUrl() -> Swift.String
  public func getForceUpdateCheckUrl() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol AppForegroundBackgroundListener : AnyObject {
  func onAppForeground()
  func onAppBackground()
}
public enum AFError : Swift.Error {
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: any Swift.Error)
    case propertyListEncodingFailed(error: any Swift.Error)
  }
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: any Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: any Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: any Swift.Error)
    case inputStreamReadFailed(error: any Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNil
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: any Swift.Error)
    case propertyListSerializationFailed(error: any Swift.Error)
  }
  case invalidURL(url: any MapstedCore.URLConvertible)
  case parameterEncodingFailed(reason: MapstedCore.AFError.ParameterEncodingFailureReason)
  case multipartEncodingFailed(reason: MapstedCore.AFError.MultipartEncodingFailureReason)
  case responseValidationFailed(reason: MapstedCore.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: MapstedCore.AFError.ResponseSerializationFailureReason)
}
extension MapstedCore.AFError {
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
}
extension MapstedCore.AFError {
  public var urlConvertible: (any MapstedCore.URLConvertible)? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: (any Swift.Error)? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
}
extension MapstedCore.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension MapstedCore.MNEntityZone {
  @objc dynamic public var zoneValue: MapstedCore.MNZone {
    @objc get
  }
  @objc dynamic public func getZoneString() -> Swift.String
  public func allNearbyLandmarks() -> [Swift.Int]
  public func getNearbyLandmarkName() -> Swift.String
  public func getNearbyLandmarkName(completion: @escaping ((Swift.String) -> Swift.Void))
  @objc dynamic public func setNearbyLandmarkName()
  public func getName(label: Swift.String, nameGetter: ((MapstedCore.MNEntityZone, Swift.Int) -> Swift.String), completion: (Swift.String) -> Swift.Void)
  public func isSameZoneAs(otherZone: MapstedCore.MNEntityZone) -> Swift.Bool
}
@_spi(LocMarketingPrivateApi) public protocol LocMarketingEventListener : AnyObject {
  @_spi(LocMarketingPrivateApi) func onLocMarketingContentRequest(propertyId: Swift.Int) -> Swift.String?
}
public protocol BuildingControllerInterface {
  func getInfo(buildingId: Swift.Int) -> MapstedCore.BuildingInfo?
  func getCached(buildingId: Swift.Int) -> MapstedCore.MNBuildingData?
  func getBuildingData(buildingId: Swift.Int, callback: (MapstedCore.MNBuildingData?) -> Swift.Void)
  func downloadAndCache(buildingId: Swift.Int, callback: (MapstedCore.MNBuildingData?) -> Swift.Void)
}
@objc public enum IsReachable : Swift.Int {
  case wifi = 1
  case cellular
  case notReachable
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Reachability : ObjectiveC.NSObject {
  @objc public static let shared: MapstedCore.Reachability
  @objc public func checkReachable() -> MapstedCore.IsReachable
  @objc deinit
}
@objc public protocol PositionVisibilityListener {
  @objc func setPositionVisibility(visible: Swift.Bool)
}
public protocol LocationMarketingCreativeDelegate {
  func dismiss(action: MapstedCore.CallToAction?)
  func viewOnMap(homeEntities: [MapstedCore.HomeEntity])
  func openWebsite(websiteURL: Swift.String) -> Swift.Bool
  func directToGlobal(campaign: MapstedCore.Campaign)
  func shareTo(campaign: MapstedCore.Campaign?, creative: MapstedCore.Creative?) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class DataPackage : ObjectiveC.NSObject {
  @objc override dynamic public init()
  convenience public init(propertyId: Swift.Int, type: MapstedCore.MNPackageType, filerId: Swift.String, status: MapstedCore.MNPackageStatus)
  @objc public func initialize(propertyId: Swift.Int, type: MapstedCore.MNPackageType, filerId: Swift.String, status: MapstedCore.MNPackageStatus)
  @objc public func printLog()
  @objc public func getPropertyId() -> Swift.Int
  @objc public func getPackageType() -> MapstedCore.MNPackageType
  @objc public func getFilerId() -> Swift.String
  @objc public func getStatus() -> MapstedCore.MNPackageStatus
  @objc deinit
}
@objc public protocol ValidBlueDotCallbackListener {
  @objc func onValidBlueDotStateChange(error: MapstedCore.EnumValidBlueDotError)
}
public protocol ISearchable {
  var propertyId: Swift.Int { get }
  var buildingId: Swift.Int { get }
  var entityId: Swift.Int { get }
  var floorId: Swift.Int { get }
  var displayName: Swift.String { get }
  var categoryName: Swift.String { get }
  var categoryUid: Swift.String { get }
  var buildingName: Swift.String { get }
  var iconUrl: Swift.String { get }
  var locations: [MapstedCore.MNMercatorZone] { get }
  var entityZones: [MapstedCore.MNEntityZone] { get }
  var matchWord: (MapstedCore.MapstedCoreSearchApi.SearchableItemType, Swift.String) { get set }
  var subcategoryUids: [Swift.String] { get }
  var categoryTags: [Swift.String] { get }
  func keywords() -> [Swift.String]
  var entities: [MapstedCore.MNSearchEntity] { get }
  var mapDataType: MapstedCore.MNDataType { get set }
  var isBuilding: Swift.Bool { get }
  var isMultiBuilding: Swift.Bool { get }
}
public protocol CMSSearchable : MapstedCore.ISearchable {
  var image: UIKit.UIImage? { get }
  var imageBaseUrlString: Swift.String? { get }
  var imageIdString: Swift.String? { get }
  var categoryTagUids: [Swift.String] { get }
  var toolTipName: Swift.String { get }
  func inRecents(forSearch: Swift.Bool) -> Swift.Bool
}
extension MapstedCore.CMSSearchable {
  public var entityId: Swift.Int {
    get
  }
  public var floorId: Swift.Int {
    get
  }
}
extension MapstedCore.ISearchable {
  public var iconUrl: Swift.String {
    get
  }
  public var subcategoryUids: [Swift.String] {
    get
  }
}
@objc public protocol PhoneHeadingAccuracyChangeListener {
  @objc func onPhoneHeadingAccuracyChanged(accuracy: MapstedCore.MNConfidence)
}
public enum MNRequestType : Swift.Int {
  case propertyInfo
  case propertyData
  case buildingData
  case buildingListFiles
  case propertyMetaData
  case propertyMetaDataBatch
  case categoryGlobalSearch
  case propertyEntities
  case CMSCategoriesForProperty
  case CMSCampaignsForProperty
  case CMSCampaignImageBaseUrl
  case propertyBulk
  case CMSLatestSyncIdForProperty
  case categoryGlobal
  case CMSCategoriesGlobal
  case CMSHolidays
  case CMSAlerts
  case CMSLatestSyncIdForPropertyAlerts
  case CMSEmergencyAlerts
  case CMSEmergencyAlertsById
  case CMSOnlineSearch
  case CMSDestinationInstruction
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func performInMain(closure: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public func revertToDefault(defaultImage: UIKit.UIImage?, loadingView: UIKit.UIActivityIndicatorView?, completion: (() -> ())? = nil)
  @_Concurrency.MainActor(unsafe) public func loadFromUrl(baseAddress: Swift.String?, imageId: Swift.String?, defaultImage: UIKit.UIImage?, loadingView: UIKit.UIActivityIndicatorView?, completion: (() -> ())? = nil)
}
@_inheritsConvenienceInitializers @objc final public class BridgeCMSManager : ObjectiveC.NSObject {
  @objc public static func getSearchEntityForProperty(_ propertyId: Swift.Int, entityId: Swift.Int) -> MapstedCore.MapstedSearchEntity
  @objc public static func getSearchEntityForBuilding(propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int) -> MapstedCore.MapstedSearchEntity
  @objc public static func getPropertySearchEntities(_ propertyId: Swift.Int) -> MapstedCore.PropertySearchEntities
  @objc public static func getPropertyWebsite(_ propertyId: Swift.Int) -> Swift.String
  @objc public static func getPropertyPhoneNumber(_ propertyId: Swift.Int) -> Swift.String
  @objc public static func getPropertyImageUid(_ propertyId: Swift.Int) -> Swift.String
  @objc public static func fetchPropertyInfo(_ id: Swift.Int, syncCheck: Swift.Bool = false)
  @objc public static func deserializeBuildingData(propertyId: Swift.Int, buildingId: Swift.Int)
  @objc public static func getLayerStyle()
  @objc public static func getBuildingSearchEntities(propertyId: Swift.Int, buildingId: Swift.Int) -> MapstedCore.BuildingSearchEntities
  @objc public static func getBuildingEntityCategoryUid(_ buildingId: Swift.Int, entityId: Swift.Int) -> Swift.String
  @objc public static func getBuildingEntityCategoryName(_ buildingId: Swift.Int, entityId: Swift.Int) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public class Explore {
  public var searchEntityGroup: MapstedCore.SearchEntity
  public var distance: Swift.String
  public var estimatedTime: Swift.String
  public var description: Swift.String
  public var isGrouping: Swift.Bool
  public var imageName: Swift.String
  public init(searchEntityGroup: MapstedCore.SearchEntity, isGrouping: Swift.Bool = false)
  public init(searchEntityGroup: MapstedCore.SearchEntity, distance: Swift.String, estimatedTime: Swift.String, description: Swift.String, imageName: Swift.String, isGrouping: Swift.Bool = false)
  public static func combineExplores(entities: [MapstedCore.HomeEntity]) -> [Swift.String : [MapstedCore.Explore]]
  @objc deinit
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> MapstedCore.Result<Self.SerializedObject> { get }
}
public struct DataResponseSerializer<Value> : MapstedCore.DataResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> MapstedCore.Result<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> MapstedCore.Result<Value>)
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> MapstedCore.Result<Self.SerializedObject> { get }
}
public struct DownloadResponseSerializer<Value> : MapstedCore.DownloadResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> MapstedCore.Result<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> MapstedCore.Result<Value>)
}
extension MapstedCore.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (MapstedCore.DefaultDataResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (MapstedCore.DataResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : MapstedCore.DataResponseSerializerProtocol
}
extension MapstedCore.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (MapstedCore.DefaultDownloadResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (MapstedCore.DownloadResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : MapstedCore.DownloadResponseSerializerProtocol
}
extension MapstedCore.Request {
  public static func serializeResponseData(response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> MapstedCore.Result<Foundation.Data>
}
extension MapstedCore.DataRequest {
  public static func dataResponseSerializer() -> MapstedCore.DataResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (MapstedCore.DataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension MapstedCore.DownloadRequest {
  public static func dataResponseSerializer() -> MapstedCore.DownloadResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (MapstedCore.DownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension MapstedCore.Request {
  public static func serializeResponseString(encoding: Swift.String.Encoding?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> MapstedCore.Result<Swift.String>
}
extension MapstedCore.DataRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> MapstedCore.DataResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (MapstedCore.DataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension MapstedCore.DownloadRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> MapstedCore.DownloadResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (MapstedCore.DownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
extension MapstedCore.Request {
  public static func serializeResponseJSON(options: Foundation.JSONSerialization.ReadingOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> MapstedCore.Result<Any>
}
extension MapstedCore.DataRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> MapstedCore.DataResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (MapstedCore.DataResponse<Any>) -> Swift.Void) -> Self
}
extension MapstedCore.DownloadRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> MapstedCore.DownloadResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (MapstedCore.DownloadResponse<Any>) -> Swift.Void) -> Self
}
extension MapstedCore.Request {
  public static func serializeResponsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> MapstedCore.Result<Any>
}
extension MapstedCore.DataRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> MapstedCore.DataResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (MapstedCore.DataResponse<Any>) -> Swift.Void) -> Self
}
extension MapstedCore.DownloadRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> MapstedCore.DownloadResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (MapstedCore.DownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol MNRoutingDelegate : AnyObject {
  func onRouteResponse(_ response: MapstedCore.MNRouteResponse)
  func onRouteInstruction(nextKeyPoint: MapstedCore.MNRouteNode, afterNextKeyPoint: MapstedCore.MNRouteNode?)
  func onRouteInstruction(nextKeyPoint: MapstedCore.MNRouteNode, routeIndex: Swift.Int)
  func onRoutingStatus(isRoutingModeOn: Swift.Bool, latestRouteResponse: MapstedCore.MNRouteResponse)
  func onRouteRecalculation(newRouteResponse: MapstedCore.MNRouteResponse)
  func onDestinationReached(waypoint: MapstedCore.MapstedWaypoint)
  func onRouteSegmentReached(currentRouteSegment: MapstedCore.MNRouteSegment, visitedRouteSegments: [MapstedCore.MNRouteSegment], upcomingRouteSegments: [MapstedCore.MNRouteSegment])
  func onUserProgressAlongRoute(routeUserProgress: MapstedCore.MNRouteUserProgress)
}
public protocol RoutingStatusCallback {
  func onRoutingStatus(isRoutingModeOn: Swift.Bool, latestRouteResponse: MapstedCore.MNRouteResponse)
  func onRouteInstructionReceived(routeNode: MapstedCore.MNRouteNode, nextRouteNode: MapstedCore.MNRouteNode?)
  func onRouteSegmentReached(currentRouteSegment: MapstedCore.MNRouteSegment, visitedRouteSegments: [MapstedCore.MNRouteSegment], upcomingRouteSegments: [MapstedCore.MNRouteSegment])
  func onUserProgressAlongRoute(routeUserProgress: MapstedCore.MNRouteUserProgress)
  func onRouteRecalculation(newRouteResponse: MapstedCore.MNRouteResponse)
  func onDestinationReached(waypoint: MapstedCore.MapstedWaypoint)
}
open class SessionManager {
  public enum MultipartFormDataEncodingResult {
    case success(request: MapstedCore.UploadRequest, streamingFromDisk: Swift.Bool, streamFileURL: Foundation.URL?)
    case failure(any Swift.Error)
  }
  public static let `default`: MapstedCore.SessionManager
  public static let defaultHTTPHeaders: MapstedCore.HTTPHeaders
  public static let multipartFormDataEncodingMemoryThreshold: Swift.UInt64
  final public let session: Foundation.URLSession
  final public let delegate: MapstedCore.SessionDelegate
  open var startRequestsImmediately: Swift.Bool
  open var adapter: (any MapstedCore.RequestAdapter)?
  open var retrier: (any MapstedCore.RequestRetrier)? {
    get
    set
  }
  open var backgroundCompletionHandler: (() -> Swift.Void)?
  public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: MapstedCore.SessionDelegate = SessionDelegate(), serverTrustPolicyManager: MapstedCore.ServerTrustPolicyManager? = nil)
  public init?(session: Foundation.URLSession, delegate: MapstedCore.SessionDelegate, serverTrustPolicyManager: MapstedCore.ServerTrustPolicyManager? = nil)
  @objc deinit
  @discardableResult
  open func request(_ url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .get, parameters: MapstedCore.Parameters? = nil, encoding: any MapstedCore.ParameterEncoding = URLEncoding.default, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.DataRequest
  @discardableResult
  open func request(_ urlRequest: any MapstedCore.URLRequestConvertible) -> MapstedCore.DataRequest
  @discardableResult
  open func download(_ url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .get, parameters: MapstedCore.Parameters? = nil, encoding: any MapstedCore.ParameterEncoding = URLEncoding.default, headers: MapstedCore.HTTPHeaders? = nil, to destination: MapstedCore.DownloadRequest.DownloadFileDestination? = nil) -> MapstedCore.DownloadRequest
  @discardableResult
  open func download(_ urlRequest: any MapstedCore.URLRequestConvertible, to destination: MapstedCore.DownloadRequest.DownloadFileDestination? = nil) -> MapstedCore.DownloadRequest
  @discardableResult
  open func download(resumingWith resumeData: Foundation.Data, to destination: MapstedCore.DownloadRequest.DownloadFileDestination? = nil) -> MapstedCore.DownloadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, to url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .post, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.UploadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, with urlRequest: any MapstedCore.URLRequestConvertible) -> MapstedCore.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, to url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .post, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, with urlRequest: any MapstedCore.URLRequestConvertible) -> MapstedCore.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, to url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .post, headers: MapstedCore.HTTPHeaders? = nil) -> MapstedCore.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, with urlRequest: any MapstedCore.URLRequestConvertible) -> MapstedCore.UploadRequest
  open func upload(multipartFormData: @escaping (MapstedCore.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: any MapstedCore.URLConvertible, method: MapstedCore.HTTPMethod = .post, headers: MapstedCore.HTTPHeaders? = nil, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((MapstedCore.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  open func upload(multipartFormData: @escaping (MapstedCore.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: any MapstedCore.URLRequestConvertible, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((MapstedCore.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(withHostName hostName: Swift.String, port: Swift.Int) -> MapstedCore.StreamRequest
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(with netService: Foundation.NetService) -> MapstedCore.StreamRequest
}
@_hasMissingDesignatedInitializers public class FilerRepository {
  public static let PRESET_PARENT_DIR_MAP_STYLE: Swift.String
  public static let PRESET_PARENT_DIR_MAP_TILES: Swift.String
  public static func sharedInstance() -> MapstedCore.FilerRepository
  public func findFile(filerId: Swift.String) -> Swift.String?
  public func getFile(filerId: Swift.String, parentDir: Swift.String?, completion: ((_ fileData: Swift.String?, _ errorMessage: Swift.String?) -> Swift.Void)?, progressHandler: ((Swift.Int) -> ())?)
  public func getFile(filerId: Swift.String, completion: ((_ fileData: Swift.String?, _ errorMessage: Swift.String?) -> Swift.Void)?)
  public func removeFile(filerId: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MapstedSearchEntities : ObjectiveC.NSObject {
  @objc public func getBuildingId() -> Swift.Int
  @objc public func getPropertyId() -> Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PropertySearchEntities : MapstedCore.MapstedSearchEntities {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BuildingSearchEntities : MapstedCore.MapstedSearchEntities {
  @objc deinit
}
public protocol LocalizationProvider {
  func getErrorText(forAmount: Swift.Double) -> Swift.String
  func getDistanceText(unit: MapstedCore.MNSettingUtils.DistanceUnit) -> Swift.String
  func getLongDistanceText(unit: MapstedCore.MNSettingUtils.DistanceUnit, distance: Swift.Int) -> Swift.String
}
extension Swift.Double {
  public func formatPoints() -> Swift.String
  public func roundUp() -> Swift.Int
  public func roundToPlaces(places: Swift.Int) -> Swift.Double
  public var metersToKm: Swift.Double {
    get
  }
  public var numberOfMetersInKm: Swift.Double {
    get
  }
  public var numberOfFeetInMiles: Swift.Double {
    get
  }
  public var metersToFeet: Swift.Double {
    get
  }
  public var metersToMiles: Swift.Double {
    get
  }
  public func shortDistanceInMetric(localizationProvider: any MapstedCore.LocalizationProvider) -> Swift.String
  public func shortDistanceImperial(localizationProvider: any MapstedCore.LocalizationProvider) -> Swift.String
  public func shortDistance(localizationProvider: any MapstedCore.LocalizationProvider) -> Swift.String
  public func longDistance(localizationProvider: any MapstedCore.LocalizationProvider) -> Swift.String
  public func longDistanceInMetric(localizationProvider: any MapstedCore.LocalizationProvider) -> Swift.String
  public func longDistanceImperial(localizationProvider: any MapstedCore.LocalizationProvider) -> Swift.String
  public func getLocalized(amount: Swift.Int, units: Swift.String) -> Swift.String
}
@_inheritsConvenienceInitializers @objc public class CompressData : ObjectiveC.NSObject {
  @objc public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MNStringsUtils {
  public struct Array2D {
  }
  public static func levenshtein(sourceString: Swift.String, target targetString: Swift.String) -> Swift.Int
  @objc deinit
}
public protocol MissingSensorsListener : AnyObject {
  func sensorNotAvailable(sensorType: MapstedCore.EnumSensorType)
}
public protocol MNTestingModuleDelegate : AnyObject {
  func onTrajectoryUpdate(trajectory: MapstedCore.MNTrajectory, tag: MapstedCore.MNDeveloperCommonTags)
  func onListOfTrajectoryUpdate(trajectory: [MapstedCore.MNTrajectory], tag: MapstedCore.MNDeveloperCommonTags)
  func onPolygonHighlight(polygonHighlight: MapstedCore.MNPolygonHighlight, tag: MapstedCore.MNDeveloperCommonTags)
  func onDisplayPoints(points: MapstedCore.MNTrajectory, tag: MapstedCore.MNDeveloperCommonTags)
  func onToastMessage(msg: Swift.String)
  func onMercatorLocUpdate(mercatorLoc: MapstedCore.MNMercatorLoc, tag: MapstedCore.MNDeveloperCommonTags)
  func onListOfMercatorLoc(floorId: Swift.Int, mercatorLocs: [MapstedCore.MNMercatorLoc], tag: MapstedCore.MNDeveloperCommonTags)
  func onInertialTrajectoryUpdate(trajectory: MapstedCore.MNTrajectory)
  func onMagFieldTrajectoryUpdate(trajectory: MapstedCore.MNTrajectory)
  func onTestGpsUpdate(mercatorLoc: MapstedCore.MNMercatorLoc)
}
public struct ImageInfo : Swift.Codable {
  public let filerId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.NSNotification.Name {
  public struct Task {
    public static let DidResume: Foundation.Notification.Name
    public static let DidSuspend: Foundation.Notification.Name
    public static let DidCancel: Foundation.Notification.Name
    public static let DidComplete: Foundation.Notification.Name
  }
}
extension Foundation.Notification {
  public struct Key {
    public static let Task: Swift.String
    public static let ResponseData: Swift.String
  }
}
public protocol iCategoryTree {
  var categories: [any MapstedCore.iCategory] { get }
  var rootCategories: [any MapstedCore.iCategory] { get }
  var branchCategories: [any MapstedCore.iCategory] { get }
}
public enum iCategoryType {
  case Root
  case Branch
  case Other
  public static func == (a: MapstedCore.iCategoryType, b: MapstedCore.iCategoryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol iCategory {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var type: MapstedCore.iCategoryType { get }
  var iconUrl: Swift.String { get }
  var sortOrder: Swift.Int { get }
  func getParentCategories() -> [any MapstedCore.iCategory]
  func getChildCategories() -> [any MapstedCore.iCategory]
}
@_hasMissingDesignatedInitializers public class Category : MapstedCore.iCategory {
  final public let id: Swift.String
  final public let name: Swift.String
  final public let type: MapstedCore.iCategoryType
  public var iconUrl: Swift.String
  public var sortOrder: Swift.Int
  public func getParentCategories() -> [any MapstedCore.iCategory]
  public func isParentOf(category: any MapstedCore.iCategory) -> Swift.Bool
  public func isAncestorOf(category: any MapstedCore.iCategory) -> Swift.Bool
  public func isChildOf(category: any MapstedCore.iCategory) -> Swift.Bool
  public func isDescendantOf(category: any MapstedCore.iCategory) -> Swift.Bool
  public func getChildCategories() -> [any MapstedCore.iCategory]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MapStyle : ObjectiveC.NSObject, Swift.Codable {
  @objc public func initialize(filerId: Swift.String, fileName: Swift.String)
  @objc public func getFilerId() -> Swift.String
  @objc public func getFileName() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol UtilsControllerInterface {
  func getDistance(m1: MapstedCore.MNMercator, m2: MapstedCore.MNMercator) -> Swift.Double
  func getDistance(l1: MapstedCore.MNLatLng, l2: MapstedCore.MNLatLng) -> Swift.Double
  func getDistFromPointToPolygon(point: MapstedCore.MNMercator, polygon: [MapstedCore.MNMercator]) -> Swift.Double
  func isPointInPolygon(point: MapstedCore.MNMercator, polygon: [MapstedCore.MNMercator]) -> Swift.Bool
  func findPropertyAndBuilding(point: MapstedCore.MNMercator) -> MapstedCore.MNZone?
  func filterAndSortSearchables(input: Swift.String, listOfSearchables: [any MapstedCore.ISearchable]) -> [any MapstedCore.ISearchable]
  func findEntityByName(name: Swift.String) -> [any MapstedCore.ISearchable]
  func fetchOnlineSearch(propertyId: Swift.Int, text: Swift.String, lang: Swift.String, page: Swift.Int, limit: Swift.Int, completion: ((MapstedCore.CMSOnlineSearchResultInfo?) -> Swift.Void)?)
  func fetchDestinationInstruction(propertyId: Swift.Int, completion: @escaping ((Swift.Bool) -> Swift.Void))
}
public protocol BridgeCMSManagerInterface {
  func getSearchEntityForProperty(_ propertyId: Swift.Int, entityId: Swift.Int) -> MapstedCore.MapstedSearchEntity
  func getSearchEntityForBuilding(propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int) -> MapstedCore.MapstedSearchEntity
  func getPropertySearchEntities(_ propertyId: Swift.Int) -> MapstedCore.PropertySearchEntities
  func getPropertyWebsite(_ propertyId: Swift.Int) -> Swift.String
  func getPropertyPhoneNumber(_ propertyId: Swift.Int) -> Swift.String
  func getPropertyImageUid(_ propertyId: Swift.Int) -> Swift.String
  func fetchPropertyInfos(_ id: Swift.Int, syncCheck: Swift.Bool)
  func deserializeBuildingData(propertyId: Swift.Int, buildingId: Swift.Int)
  func getLayerStyle()
  func getBuildingSearchEntities(propertyId: Swift.Int, buildingId: Swift.Int) -> MapstedCore.BuildingSearchEntities
  func getBuildingEntityCategoryUid(_ buildingId: Swift.Int, entityId: Swift.Int) -> Swift.String
  func getBuildingEntityCategoryName(_ buildingId: Swift.Int, entityId: Swift.Int) -> Swift.String
}
public protocol BridgeMNCoreDataControllerInterface {
  func saveAnalyticsPackage(filePath: Swift.String, propertyId: Swift.Int64, type: Swift.Int32)
  func fetchAnalyticsPackagesToPost() -> [[Swift.String : Any]]
  func deleteAnalyticsPackage(filePath: Swift.String)
  func updateAnalyticsPackageAsSent(filePath: Swift.String)
  func isPropertyInfosUpdated() -> Swift.Bool
  func isPropertyDownloaded(propertyId: Swift.Int) -> Swift.Bool
}
public struct HomeEntity : Swift.Codable {
  public let name: Swift.String?
  public let propertyId: Swift.Int?
  public let buildingId: Swift.Int?
  public let floorId: Swift.Int?
  public let entityId: Swift.Int?
  public init(name: Swift.String?, propertyId: Swift.Int, buildingId: Swift.Int, floorId: Swift.Int?, entityId: Swift.Int)
  public var mapEntity: MapstedCore.MNMapEntity? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension MapstedCore.MNDailyBusinessHour : Swift.Comparable {
  public static func < (lhs: MapstedCore.MNDailyBusinessHour, rhs: MapstedCore.MNDailyBusinessHour) -> Swift.Bool
}
public struct CMSCategoryInfo {
}
public struct CMSSearchResultInfo {
  public var propertyId: Swift.Int
  public var buildingId: Swift.Int
  public var floorId: Swift.Int
  public var entityId: Swift.Int
  public var longName: Swift.String
  public var iconImage: Swift.String?
  public var iconBaseUrl: Swift.String
}
public struct CMSOnlineSearchResultEntity {
  public var syncId: Swift.String
  public var entityId: Swift.Int
  public var propertyId: Swift.Int
  public var floorId: Swift.Int
  public var buildingId: Swift.Int
  public var cmsEntityId: Swift.String
  public var keywordMatched: Swift.String
}
public struct CMSOnlineSearchResultInfo {
  public var total: Swift.Int
  public var entities: [MapstedCore.CMSOnlineSearchResultEntity]
}
public enum SocialMedium : Swift.String {
  case Twitter
  case Facebook
  case Instagram
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CMSDefaultIconStyle {
  public var imageBaseUrl: Swift.String
  public var iconId: Swift.String
  public var childIconId: Swift.String?
  public var size: Swift.Float?
  public var type: Swift.String?
  public var entityType: Swift.Int?
  public var subEntityType: Swift.Int?
  @objc deinit
}
extension MapstedCore.CMSDefaultIconStyle : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CMSPropertyInfo : MapstedCore.CMSEntityInfo {
  public var categoryTree: MapstedCore.CMSCategoryTree?
  public var categories: [Swift.String : MapstedCore.CMSCategory]
  public var buildingInfoMap: [Swift.Int : MapstedCore.CMSBuildingInfo]
  public var buildingEntityMap: [Swift.Int : MapstedCore.CMSBuildingInfo]
  public var allEntities: [MapstedCore.CMSBuildingInfo] {
    get
  }
  public func addBuildingInfo(buildingInfo: MapstedCore.CMSBuildingInfo)
  public func addDefaultIconStyle(mapIcon: MapstedCore.CMSDefaultIconStyle)
  public func getBuildingInfo(buildingId: Swift.Int) -> MapstedCore.CMSBuildingInfo?
  public var languageCode: Swift.String
  public func description() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CMSStoreInfo : MapstedCore.CMSEntityInfo {
  @objc deinit
}
public protocol PropertyDataDownloadListener : AnyObject {
  func onPropertyDataReady(propertyData: MapstedCore.MNPropertyData)
}
@_inheritsConvenienceInitializers @objc final public class BridgeMapstedCoreSyncApi : ObjectiveC.NSObject {
  @objc public static func onMapstedAlertEvent(propertyId: Swift.Int, triggerId: Swift.String, alertId: Swift.String)
  @objc public static func onMapstedMarketingEvent(propertyId: Swift.Int) -> Swift.String?
  @objc public static func onMapstedGeofenceEvent(propertyId: Swift.Int, geofenceId: Swift.String)
  @objc public static func onMapstedMarketingEvent(propertyId: Swift.Int, triggerId: Swift.String, campaignId: Swift.String)
  @objc public static func requestZoneChangeConfirmation(prevZone: MapstedCore.MNZone, newZone: MapstedCore.MNZone)
  @objc public static func requestSelectNearbyEntityList(_ entityList: [Swift.Int])
  @objc public static func onValidBlueDotStateChange(error: MapstedCore.EnumValidBlueDotError)
  @objc public static func onRouteResponse(response: MapstedCore.MNRouteResponse)
  @objc public static func onRoutingStatus(isRoutingModeOn: Swift.Bool, latestRouteResponse: MapstedCore.MNRouteResponse)
  @objc public static func onRouteRecalculation(newRouteResponse: MapstedCore.MNRouteResponse)
  @objc public static func onDestinationReached(waypoint: MapstedCore.MapstedWaypoint)
  @objc public static func onRouteSegmentReached(currentSegment: MapstedCore.MNRouteSegment, visitedSegments: [MapstedCore.MNRouteSegment], upcomingSegments: [MapstedCore.MNRouteSegment])
  @objc public static func onUserProgressAlongRoute(routeUserProgress: MapstedCore.MNRouteUserProgress)
  @objc public static func onRouteInstruction(nextKeyPoint: MapstedCore.MNRouteNode, afterNextKeyPoint: MapstedCore.MNRouteNode?)
  @objc public static func addNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  @objc public static func removeNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  @objc public static func onPositionChange(position: MapstedCore.MNPosition)
  @objc public static func onPostLiveLocation(position: MapstedCore.MNPosition)
  @objc public static func onPositionAnimation(position: MapstedCore.MNPosition, animationBegins: Swift.Bool)
  @objc public static func setPositionVisibility(visible: Swift.Bool)
  @objc public static func downloadPropertyInfoSync() -> Swift.Bool
  @objc public static func downloadPropertyData(propertyId: Swift.Int, progress: @escaping ((Swift.Float) -> Swift.Void), completed: @escaping (() -> Swift.Void))
  @objc public static func propertyVersion(propertyId: Swift.Int) -> Swift.Int
  @objc public static func onLicenceStatusChanged(newStatus: MapstedCore.MNLicenceStatus)
  @objc public static func onSensorAccuracyChanged(type sensorTypeRawValue: Swift.Int, newValue: Swift.Int)
  @objc public static func removeImages(urlMap: [Swift.String : Swift.String])
  @objc public static func fetchPropertyInfoImagesFromServerAsync(urlMap: [Swift.String : Swift.String], dataId: Swift.Int, dataType: MapstedCore.MNDataType)
  @objc public static func reportLocationUpdate(locations: [CoreLocation.CLLocation])
  @objc public static func reportLocationUpdate(error: Foundation.NSError)
  @objc public static func onSDKSuccess()
  @objc public static func onSDKFailure(errorCode: MapstedCore.EnumSdkError)
  @objc public static func onSDKStatusUpdate(update: MapstedCore.EnumSdkUpdate)
  @objc public static func jsonDataForPropertyInfos() -> [Swift.String]?
  @objc public static func jsonDataForPropertyInfo(propertyId: Swift.Int) -> Swift.String?
  @objc public static func productKey() -> Swift.String
  @objc public static func validateProductLicOnline() -> Swift.Bool
  @objc public static func objectDataMapForPropertyData(propertyId: Swift.Int) -> MapstedCore.MNObjectDataMap?
  @objc public static func buildingVersion(buildingId: Swift.Int) -> Swift.Int
  @objc public static func objectDataMapForPropertyLanguage(propertyId: Swift.Int, languageId: Swift.Int) -> MapstedCore.MNObjectDataMap?
  @objc public static func objectDataMapForBuildingData(buildingId: Swift.Int) -> MapstedCore.MNObjectDataMap?
  @objc public static func languageVersionForPropertyData(propertyId: Swift.Int, languageType: MapstedCore.MNLanguageType) -> Swift.Int
  @objc public static func objectDatamapForBuildingLanguage(buildingId: Swift.Int, languageId: Swift.Int) -> MapstedCore.MNObjectDataMap?
  @objc public static func languageVersionForBuildingData(buildingId: Swift.Int, languageType: MapstedCore.MNLanguageType) -> Swift.Int
  @objc public static func objectDataMapForGlobalCategories() -> MapstedCore.MNObjectDataMap?
  @objc public static func onPhoneHeadingChanged(headingRad: CoreFoundation.CGFloat)
  @objc public static func onPhoneHeadingAccuracyChanged(accuracy: MapstedCore.MNConfidence)
  @objc public static func onUserHeadingChanged(headingRad: CoreFoundation.CGFloat)
  @objc public static func onFusedUserHeadingChanged(headingRad: CoreFoundation.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
open class ServerTrustPolicyManager {
  final public let policies: [Swift.String : MapstedCore.ServerTrustPolicy]
  public init(policies: [Swift.String : MapstedCore.ServerTrustPolicy])
  open func serverTrustPolicy(forHost host: Swift.String) -> MapstedCore.ServerTrustPolicy?
  @objc deinit
}
public enum ServerTrustPolicy {
  case performDefaultEvaluation(validateHost: Swift.Bool)
  case performRevokedEvaluation(validateHost: Swift.Bool, revocationFlags: CoreFoundation.CFOptionFlags)
  case pinCertificates(certificates: [Security.SecCertificate], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case pinPublicKeys(publicKeys: [Security.SecKey], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case disableEvaluation
  case customEvaluation((_ serverTrust: Security.SecTrust, _ host: Swift.String) -> Swift.Bool)
  public static func certificates(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecCertificate]
  public static func publicKeys(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecKey]
  public func evaluate(_ serverTrust: Security.SecTrust, forHost host: Swift.String) -> Swift.Bool
}
public enum DownloadStatus {
  case Downloaded
  case NotDownloaded
  case UpdateAvailable
  case Unknown
  public static func == (a: MapstedCore.DownloadStatus, b: MapstedCore.DownloadStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PropertyControllerInterface {
  func getInfo(propertyId: Swift.Int) -> MapstedCore.PropertyInfo?
  func getInfos() -> [Swift.Int : MapstedCore.PropertyInfo]
  func getAll() -> [MapstedCore.PropertyInfo]
  func getAllIds() -> [Swift.Int]
  func downloadAndCache(propertyId: Swift.Int, callback: (MapstedCore.MNPropertyData?) -> Swift.Void)
  func getCachedIds() -> Swift.Set<Swift.Int>
  func getCached(propertyId: Swift.Int) -> MapstedCore.MNPropertyData?
  func getNumCached() -> Swift.Int
  func delete(propertyId: Swift.Int, listener: any MapstedCore.PropertyActionCompleteListener)
  func unload(propertyId: Swift.Int, listener: any MapstedCore.PropertyActionCompleteListener)
  func startDownload(propertyId: Swift.Int, propertyDownloadListener listener: any MapstedCore.PropertyDownloadListener)
  func getDownloadStatus(propertyId: Swift.Int) -> MapstedCore.DownloadStatus
  func setSelected(propertyId: Swift.Int)
  func getSelected() -> Swift.Int
  func getSearchEntities(propertyId: Swift.Int) -> [any MapstedCore.ISearchable]
  func getEntity(propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int) -> MapstedCore.MNSearchEntity?
  func findEntityByName(name: Swift.String, propertyId: Swift.Int) -> [any MapstedCore.ISearchable]
  func getCategories(propertyId: Swift.Int, callback: @escaping (((any MapstedCore.PoiCategoriesResult)?) -> Swift.Void))
  func searchPOIs(filter: MapstedCore.PoiFilter, propertyId: Swift.Int, completion: @escaping (([any MapstedCore.ISearchable]) -> Swift.Void))
  func addListener(listener: any MapstedCore.PropertyCompletionListener)
  func removeListener(listener: any MapstedCore.PropertyCompletionListener)
}
@objc(MNEntityZoneDistance) public class EntityZoneDistance : ObjectiveC.NSObject {
  @objc public init(zone: MapstedCore.MNEntityZone, distance: Swift.Double)
  public func getZone() -> MapstedCore.MNEntityZone
  public func getDistance() -> Swift.Double
  public func getEntity() -> MapstedCore.MNSearchEntity?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class TaskDelegate : ObjectiveC.NSObject {
  final public let queue: Foundation.OperationQueue
  public var data: Foundation.Data? {
    get
  }
  public var error: (any Swift.Error)?
  @objc deinit
}
public protocol GeofenceControllerInterface {
  func addListener(_ object: any MapstedCore.GeofenceEventListener)
  func removeListener(_ object: any MapstedCore.GeofenceEventListener)
}
extension MapstedCore.MNMapPolygon {
  public func name() -> Swift.String
}
public protocol CategoriesDelegate {
  func refreshCategories()
}
@objc @_inheritsConvenienceInitializers public class CMSCategories : ObjectiveC.NSObject {
  public func addDelegate(delegate: any MapstedCore.CategoriesDelegate)
  @objc public static let shared: MapstedCore.CMSCategories
  public func addCategory(cmsCategory: MapstedCore.CMSCategory)
  public func getCategory(guid: Swift.String) -> MapstedCore.CMSCategory?
  public func getRoots() -> [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
public typealias DayAndTime = (day: Swift.Int, hour: Swift.Int, minute: Swift.Int)
@_hasMissingDesignatedInitializers public class DailyBusinessHours {
  public var isValid: Swift.Bool
  public var isOpen: Swift.Bool
  public var dayOfBusiness: Swift.Int
  public var openingDay: Swift.Int
  public var openingHour: Swift.Int
  public var openingMinute: Swift.Int
  public var showOpeningTime: Swift.Bool
  public var openingTimeString: Swift.String
  public var closingDay: Swift.Int
  public var closingHour: Swift.Int
  public var closingMinute: Swift.Int
  public var showClosingTime: Swift.Bool
  public var closingTimeString: Swift.String
  @objc deinit
}
public class WeeklyBusinessHours {
  public init(businessHours: [MapstedCore.MNDailyBusinessHour])
  public func getString(from date: Foundation.Date) -> Swift.String
  public func getWorkingHourTable(date: Foundation.Date) -> [Swift.Int : [Swift.String]]
  public static func formatHourAndMinute(hour: Swift.Int, minute: Swift.Int) -> Swift.String
  public func getTimeHint(timeZoneName: Swift.String? = nil) -> MapstedCore.DailyBusinessHours
  @objc deinit
}
@objc public protocol RoutingRequestCallback {
  @objc func onSuccess(routeResponse: MapstedCore.MNRouteResponse)
  @objc func onError(errorCode: Swift.Int, errorMessage: Swift.String, alertIds: [Swift.String])
}
@_hasMissingDesignatedInitializers public class MapstedCoreSearchApi {
  public enum StringSearchType : Swift.Int {
    case StartsWith
    case Contains
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum SearchableItemType : Swift.Int {
    case Name
    case Category
    case CategoryTags
    case Keywords
    case BuildingName
    case OnlineSearchResult
    case Other
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum SortType : Swift.Int {
    case None
    case Alphabetical
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum StringDistanceMetric : Swift.Int {
    case Unknown
    case JaroWinkler
    case NeedlemanWunsh
    case Levensein
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum JaroWinklerConstant {
    public enum Weight {
    }
  }
  public static func findEntity(input: Swift.String, items: [(any MapstedCore.ISearchable)?]) -> [Swift.Int]
  public static func filterAndSortSearchables(input: Swift.String, items: [(any MapstedCore.ISearchable)?]) -> [Swift.Int]
  @objc deinit
}
public protocol BuildingDataDownloadListener : AnyObject {
  func onBuildingDataReady(buildingData: MapstedCore.MNBuildingData)
}
@_inheritsConvenienceInitializers @objc final public class BridgeCoreDataController : ObjectiveC.NSObject {
  @objc public static func saveAnalyticsPackage(filePath: Swift.String, propertyId: Swift.Int64, type: Swift.Int32)
  @objc public static func fetchAnalyticsPackagesToPost() -> [[Swift.String : Any]]
  @objc public static func deleteAnalyticsPackage(filePath: Swift.String)
  @objc public static func updateAnalyticsPackageAsSent(filePath: Swift.String)
  @objc public static func isPropertyInfosUpdated() -> Swift.Bool
  @objc public static func isPropertyDownloaded(propertyId: Swift.Int) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MNSettingUtils : ObjectiveC.NSObject {
  @objc public static let shared: MapstedCore.MNSettingUtils
  public enum Key : Swift.String {
    case startTutorial
    case navUseShortestRoute
    case navOptionsEscalators
    case navOptionsStairs
    case navOptionsElevators
    case clearAll
    case timeFormat
    case distanceUnits
    case debugFeaturesPromotions
    case debugShowLaunchScreen
    case debugTestEnvironment
    case debugTestingBuildingEnvironment
    case debugStageEnvironment
    case debugPromotionBuilding
    case debugTestModuleEnable
    case debugReadFileAsIOS
    case debugTestFileIOSEncoding
    case debugDrawTrajectory
    case debugDrawMaxStateHistory
    case debugShowHamburgerMenu
    case debugTechnicalDifficultyAlert
    case debugShowPropertyBoundary
    case vLogEnable
    case dLogEnable
    case wtfAbortEnable
    case findAFriendEnable
    case postLiveLocationEnable
    case postAnalyticsOnMobileDataEnable
    case AllowOffPremiseBackgroundLocationScanning
    case dynamicErrorBoundary
    case redDotForOutdoorsOnProperty
    case redDotForOutdoorsOffPremise
    case StagingEnviourmentMobileMode
    case EnableBluetoothAdHocScanning
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DistanceUnit : Swift.String {
    case meters
    case feet
    case kilometers
    case miles
    case auto
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var navUseShortestRoute: Swift.Bool {
    get
    set
  }
  public var mercatorZone_Userpath: [MapstedCore.MNMercatorZone]?
  public var simulatorSpeedModifier: Swift.Double?
  public var startTutorial: Swift.Bool {
    get
    set
  }
  public var navOptionsEscalators: Swift.Bool {
    get
    set
  }
  public var navOptionsStairs: Swift.Bool {
    get
    set
  }
  public var navOptionsElevators: Swift.Bool {
    get
    set
  }
  public var clearAll: Swift.Bool {
    get
    set
  }
  public var preferredDistanceUnit: MapstedCore.MNSettingUtils.DistanceUnit {
    get
  }
  public var distanceUnits: Swift.String {
    get
    set
  }
  public var timeFormat: Swift.Bool {
    get
    set
  }
  public var dynamicErrorBoundaryEnabled: Swift.Bool {
    get
    set
  }
  public var redDotForOutdoorsOnPropertyEnabled: Swift.Bool {
    get
    set
  }
  public var redDotForOutdoorsOffPremiseEnabled: Swift.Bool {
    get
    set
  }
  public var prefrredTimeFormatSpecifier: Swift.String {
    get
  }
  public var preferredTimeFormat: Swift.Int {
    get
  }
  @objc public var findAFriendIsEnabled: Swift.Bool {
    @objc get
  }
  @objc public var postLiveLocationEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var postAnalyticsOnMobileDataEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var AllowOffPremiseBackgroundLocationScanning: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var enableBluetoothAdHocScanning: Swift.Bool {
    @objc get
    @objc set
  }
  public var debugShowPropertyBoundary: Swift.Bool {
    get
  }
  public var debugFeaturesPromotions: Swift.Bool {
    get
  }
  public var debugTestEnvironment: Swift.Bool {
    get
    set
  }
  public var debugStageEnvironment: Swift.Bool {
    get
    set
  }
  public var isCMSStagingEnvModeEnabled: Swift.Bool {
    get
    set
  }
  public var debugTestingBuildingEnvironment: Swift.Bool {
    get
    set
  }
  @objc public var debugTestModuleEnable: Swift.Bool {
    @objc get
  }
  @objc public var debugReadFileAsIOS: Swift.Bool {
    @objc get
  }
  @objc public var debugTestFileIOSEncoding: Swift.Bool {
    @objc get
  }
  @objc public var debugDrawTrajectory: Swift.Bool {
    @objc get
  }
  public var debugTechnicalDifficultyAlert: Swift.Bool {
    get
    set
  }
  public var debugShowHamburgerMenu: Swift.Bool {
    get
    set
  }
  @objc public var enableLocationServices: Swift.Bool {
    @objc get
    @objc set
  }
  public enum Environment {
    case production, staging, debug
    public static func == (a: MapstedCore.MNSettingUtils.Environment, b: MapstedCore.MNSettingUtils.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func changeValues(value: Any, key: Swift.String)
  public static func setEnvironment(_ environment: MapstedCore.MNSettingUtils.Environment)
  public static func setVLog(_ isEnabled: Swift.Bool)
  public static func setWtfAbort(_ isEnabled: Swift.Bool)
  public static func enableFindAFriend(_ isEnabled: Swift.Bool)
  public func setLocationSimulationDetails(speed: Swift.Float, Userpath: [MapstedCore.MNMercatorZone], CompletedBlock: ((Swift.Bool) -> Swift.Void))
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FileManagerUtility {
  public func removeFile(at filePath: Swift.String) -> Swift.Bool
  public func fileExist(at filePath: Swift.String) -> Swift.Bool
  public func fetchDataFromFile(at filePath: Swift.String) -> Foundation.Data?
  public func getFilePathFor(filerId: Swift.String, at folder: Swift.String) -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BuildingDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BuildingEntitiesDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingEntitiesDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BuildingLanguageDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingLanguageDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BuildingCoverImagesDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingCoverImagesDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CategoryDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.CategoryDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CategoryLanguageDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.CategoryLanguageDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EntityLanguage : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.EntityLanguage>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HolidayDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.HolidayDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LevelDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.LevelDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LevelLanguageDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.LevelLanguageDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MapIconsDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.MapIconsDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PropertyDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.PropertyDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PropertyCategoryDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.PropertyCategoryDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PropertyCoverImagesDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.PropertyCoverImagesDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PropertyLanguageDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.PropertyLanguageDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StoreDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.StoreDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StoreLanguageDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.StoreLanguageDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SubCategoryDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.SubCategoryDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StoreSubcategoryDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.StoreSubcategoryDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class WorkingPeriodDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.WorkingPeriodDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StoreHoursDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.StoreHoursDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RecentEntityDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.RecentEntityDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FavoriteEntityDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.FavoriteEntityDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EntityHoursDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.EntityHoursDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DestinationInstructionDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedCore.DestinationInstructionDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class CoreApi {
  public static let ConfigManager: any MapstedCore.ConfigControllerInterface
  public static let LocationManager: any MapstedCore.LocationControllerInterface
  public static let SensorDataManager: any MapstedCore.SensorDataControllerInterface
  public static let PropertyManager: any MapstedCore.PropertyControllerInterface
  public static let AnalyticsManager: any MapstedCore.AnalyticsControllerInterface
  public static let RoutingManager: any MapstedCore.RoutingControllerInterface
  public static let LicenceManager: any MapstedCore.LicenceControllerInterface
  public static let UtilsManager: any MapstedCore.UtilsControllerInterface
  public static let BuildingManager: any MapstedCore.BuildingControllerInterface
  public static let GeofenceManager: any MapstedCore.GeofenceControllerInterface
  public static func initialize(callback: any MapstedCore.CoreInitCallback)
  public static func hasInit() -> Swift.Bool
  public static func onResume()
  public static func onPause()
  public static func onDestroy()
  @objc deinit
}
public protocol BridgeMapstedCoreSyncApiInterface {
  func onMapstedAlertEvent(propertyId: Swift.Int, triggerId: Swift.String, alertId: Swift.String)
  func onMapstedMarketingEvent(propertyId: Swift.Int) -> Swift.String?
  func onMapstedGeofenceEvent(propertyId: Swift.Int, geofenceId: Swift.String)
  func onMapstedMarketingEvent(propertyId: Swift.Int, triggerId: Swift.String, campaignId: Swift.String)
  func requestZoneChangeConfirmation(prevZone: MapstedCore.MNZone, newZone: MapstedCore.MNZone)
  func requestSelectNearbyEntityList(_ entityList: [Swift.Int])
  func onValidBlueDotStateChange(error: MapstedCore.EnumValidBlueDotError)
  func onRouteResponse(response: MapstedCore.MNRouteResponse)
  func onRoutingStatus(isRoutingModeOn: Swift.Bool, latestRouteResponse: MapstedCore.MNRouteResponse)
  func onRouteRecalculation(newRouteResponse: MapstedCore.MNRouteResponse)
  func onDestinationReached(waypoint: MapstedCore.MapstedWaypoint)
  func onRouteSegmentReached(currentSegment: MapstedCore.MNRouteSegment, visitedSegments: [MapstedCore.MNRouteSegment], upcomingSegments: [MapstedCore.MNRouteSegment])
  func onUserProgressAlongRoute(routeUserProgress: MapstedCore.MNRouteUserProgress)
  func onRouteInstruction(nextKeyPoint: MapstedCore.MNRouteNode, afterNextKeyPoint: MapstedCore.MNRouteNode?)
  func addNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  func removeNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  func onPositionChange(position: MapstedCore.MNPosition)
  func onPostLiveLocation(position: MapstedCore.MNPosition)
  func onPositionAnimation(position: MapstedCore.MNPosition, animationBegins: Swift.Bool)
  func setPositionVisibility(visible: Swift.Bool)
  func downloadPropertyInfoSync() -> Swift.Bool
  func downloadPropertyDatas(propertyId: Swift.Int, progress: @escaping ((Swift.Float) -> Swift.Void), completed: @escaping (() -> Swift.Void))
  func propertyVersion(propertyId: Swift.Int) -> Swift.Int
  func onLicenceStatusChanged(newStatus: MapstedCore.MNLicenceStatus)
  func onSensorAccuracyChanged(type sensorTypeRawValue: Swift.Int, newValue: Swift.Int)
  func removeImages(urlMap: [Swift.String : Swift.String])
  func fetchPropertyInfoImagesFromServerAsyncs(urlMap: [Swift.String : Swift.String], dataId: Swift.Int, dataType: MapstedCore.MNDataType)
  func reportLocationUpdate(locations: [CoreLocation.CLLocation])
  func reportLocationUpdate(error: Foundation.NSError)
  func onSDKSuccess()
  func onSDKFailure(errorCode: MapstedCore.EnumSdkError)
  func onSDKStatusUpdate(update: MapstedCore.EnumSdkUpdate)
  func jsonDataForPropertyInfos() -> [Swift.String]?
  func jsonDataForPropertyInfo(propertyId: Swift.Int) -> Swift.String?
  func productKey() -> Swift.String
  func validateProductLicOnline() -> Swift.Bool
  func objectDataMapForPropertyData(propertyId: Swift.Int) -> MapstedCore.MNObjectDataMap?
  func buildingVersion(buildingId: Swift.Int) -> Swift.Int
  func objectDataMapForPropertyLanguage(propertyId: Swift.Int, languageId: Swift.Int) -> MapstedCore.MNObjectDataMap?
  func objectDataMapForBuildingData(buildingId: Swift.Int) -> MapstedCore.MNObjectDataMap?
  func languageVersionForPropertyData(propertyId: Swift.Int, languageType: MapstedCore.MNLanguageType) -> Swift.Int
  func objectDatamapForBuildingLanguage(buildingId: Swift.Int, languageId: Swift.Int) -> MapstedCore.MNObjectDataMap?
  func languageVersionForBuildingData(buildingId: Swift.Int, languageType: MapstedCore.MNLanguageType) -> Swift.Int
  func objectDataMapForGlobalCategories() -> MapstedCore.MNObjectDataMap?
  func onPhoneHeadingChanged(headingRad: CoreFoundation.CGFloat)
  func onPhoneHeadingAccuracyChanged(accuracy: MapstedCore.MNConfidence)
  func onUserHeadingChanged(headingRad: CoreFoundation.CGFloat)
  func onFusedUserHeadingChanged(headingRad: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers open class SessionDelegate : ObjectiveC.NSObject {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, (any Swift.Error)?) -> Swift.Void)?
  open var sessionDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var sessionDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var sessionDidFinishEventsForBackgroundURLSession: ((Foundation.URLSession) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Foundation.URLRequest?)?
  open var taskWillPerformHTTPRedirectionWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var taskDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Foundation.InputStream?)?
  open var taskNeedNewBodyStreamWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, @escaping (Foundation.InputStream?) -> Swift.Void) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, (any Swift.Error)?) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Foundation.URLSession.ResponseDisposition)?
  open var dataTaskDidReceiveResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse, @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void) -> Swift.Void)?
  open var dataTaskDidBecomeDownloadTask: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLSessionDownloadTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)?
  open var dataTaskWillCacheResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse, @escaping (Foundation.CachedURLResponse?) -> Swift.Void) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskReadClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskWriteClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskBetterRouteDiscovered: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskDidBecomeInputAndOutputStreams: ((Foundation.URLSession, Foundation.URLSessionStreamTask, Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? {
    get
    set
  }
  open subscript(task: Foundation.URLSessionTask) -> MapstedCore.Request? {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector) -> Swift.Bool
  @objc deinit
}
extension MapstedCore.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
extension MapstedCore.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
  @objc(URLSession:task:didFinishCollectingMetrics:) dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
}
extension MapstedCore.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension MapstedCore.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
}
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
extension MapstedCore.SessionDelegate : Foundation.URLSessionStreamDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, readClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, writeClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, betterRouteDiscoveredFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, streamTask: Foundation.URLSessionStreamTask, didBecome inputStream: Foundation.InputStream, outputStream: Foundation.OutputStream)
}
@objc public protocol PositionChangeListener {
  @objc func onPositionChange(position: MapstedCore.MNPosition)
}
public struct CallToAction : Swift.Codable {
  public let text: [Swift.String : Swift.String]?
  public let action: Swift.String?
  public let websiteUrl: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol SensorAccuracyListener : AnyObject {
  func accuracyChanged(sensorType: MapstedCore.EnumSensorType, newValue: Swift.Int)
}
@_hasMissingDesignatedInitializers public class PoiFilter {
  public static func Builder() -> MapstedCore.PoiFilter
  public func addFilter(_ filter: MapstedCore.PoiIntersectionFilter) -> MapstedCore.PoiFilter
  public func includePoi(searchable: any MapstedCore.ISearchable) -> Swift.Bool
  public func build() -> MapstedCore.PoiFilter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PoiIntersectionFilter {
  public static func Builder() -> MapstedCore.PoiIntersectionFilter
  public func addBuilding(id: Swift.Int) -> MapstedCore.PoiIntersectionFilter
  public func addFloor(id: Swift.Int) -> MapstedCore.PoiIntersectionFilter
  public func addCategory(id: Swift.String) -> MapstedCore.PoiIntersectionFilter
  public func build() -> MapstedCore.PoiIntersectionFilter
  @objc deinit
}
public enum LocationError : Swift.Error {
  case UnknownUserLocation
  case UnknownEntityLocation(entityZone: MapstedCore.MNEntityZone)
  case UnableToFindNearest
}
@objc @_inheritsConvenienceInitializers public class Analytics : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedCore.Analytics {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.Analytics>
  @objc @NSManaged dynamic public var dataType: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var objectFilePath: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sentTimestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
}
extension MapstedCore.Analytics : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@objc @_inheritsConvenienceInitializers public class MNBuildingDataStorage : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedCore.MNBuildingDataStorage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.MNBuildingDataStorage>
  @objc @NSManaged dynamic public var buildingId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalDownloadSize: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var datas: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languages: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedCore.MNBuildingDataStorage {
  @objc(addDatasObject:) @NSManaged dynamic public func addToDatas(_ value: MapstedCore.MNDataObject)
  @objc(removeDatasObject:) @NSManaged dynamic public func removeFromDatas(_ value: MapstedCore.MNDataObject)
  @objc(addDatas:) @NSManaged dynamic public func addToDatas(_ values: Foundation.NSSet)
  @objc(removeDatas:) @NSManaged dynamic public func removeFromDatas(_ values: Foundation.NSSet)
}
extension MapstedCore.MNBuildingDataStorage {
  @objc(addLanguagesObject:) @NSManaged dynamic public func addToLanguages(_ value: MapstedCore.MNLanguage)
  @objc(removeLanguagesObject:) @NSManaged dynamic public func removeFromLanguages(_ value: MapstedCore.MNLanguage)
  @objc(addLanguages:) @NSManaged dynamic public func addToLanguages(_ values: Foundation.NSSet)
  @objc(removeLanguages:) @NSManaged dynamic public func removeFromLanguages(_ values: Foundation.NSSet)
}
extension MapstedCore.MNBuildingDataStorage : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@objc @_inheritsConvenienceInitializers public class MNContent : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedCore.MNContent {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.MNContent>
  @objc @NSManaged dynamic public var contentType: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dataId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dataType: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var licenceId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension MapstedCore.MNContent : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@objc @_inheritsConvenienceInitializers public class MNDataObject : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedCore.MNDataObject {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.MNDataObject>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dataId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var downloaded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var downloadSize: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parentBuilding: MapstedCore.MNBuildingDataStorage? {
    @objc get
    @objc set
  }
}
extension MapstedCore.MNDataObject : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@objc @_inheritsConvenienceInitializers public class MNLanguage : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedCore.MNLanguage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.MNLanguage>
  @objc @NSManaged dynamic public var data: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dataId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var downloaded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var downloadSize: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension MapstedCore.MNLanguage : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@objc @_inheritsConvenienceInitializers public class MNPropertyDataStorage : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedCore.MNPropertyDataStorage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.MNPropertyDataStorage>
  @objc @NSManaged dynamic public var propertyId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalDownloadSize: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var datas: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languages: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedCore.MNPropertyDataStorage {
  @objc(addDatasObject:) @NSManaged dynamic public func addToDatas(_ value: MapstedCore.MNDataObject)
  @objc(removeDatasObject:) @NSManaged dynamic public func removeFromDatas(_ value: MapstedCore.MNDataObject)
  @objc(addDatas:) @NSManaged dynamic public func addToDatas(_ values: Foundation.NSSet)
  @objc(removeDatas:) @NSManaged dynamic public func removeFromDatas(_ values: Foundation.NSSet)
}
extension MapstedCore.MNPropertyDataStorage {
  @objc(addLanguagesObject:) @NSManaged dynamic public func addToLanguages(_ value: MapstedCore.MNLanguage)
  @objc(removeLanguagesObject:) @NSManaged dynamic public func removeFromLanguages(_ value: MapstedCore.MNLanguage)
  @objc(addLanguages:) @NSManaged dynamic public func addToLanguages(_ values: Foundation.NSSet)
  @objc(removeLanguages:) @NSManaged dynamic public func removeFromLanguages(_ values: Foundation.NSSet)
}
extension MapstedCore.MNPropertyDataStorage : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.BuildingCoverImagesDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingCoverImagesDO>
  @objc @NSManaged dynamic public var imageId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sortOrder: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofBuilding: MapstedCore.BuildingDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.BuildingCoverImagesDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.BuildingDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingDO>
  @objc @NSManaged dynamic public var addressCity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressCountry: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressFull: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressPostal: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressProvince: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressStreet: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroidType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroidX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroidY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroidZ: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneOffset: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var website: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var coverImages: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languages: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var levels: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofProperty: MapstedCore.PropertyDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingHours: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subcategories: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedCore.BuildingDO {
  @objc(addCoverImagesObject:) @NSManaged dynamic public func addToCoverImages(_ value: MapstedCore.BuildingCoverImagesDO)
  @objc(removeCoverImagesObject:) @NSManaged dynamic public func removeFromCoverImages(_ value: MapstedCore.BuildingCoverImagesDO)
  @objc(addCoverImages:) @NSManaged dynamic public func addToCoverImages(_ values: Foundation.NSSet)
  @objc(removeCoverImages:) @NSManaged dynamic public func removeFromCoverImages(_ values: Foundation.NSSet)
}
extension MapstedCore.BuildingDO {
  @objc(addLanguagesObject:) @NSManaged dynamic public func addToLanguages(_ value: MapstedCore.BuildingLanguageDO)
  @objc(removeLanguagesObject:) @NSManaged dynamic public func removeFromLanguages(_ value: MapstedCore.BuildingLanguageDO)
  @objc(addLanguages:) @NSManaged dynamic public func addToLanguages(_ values: Foundation.NSSet)
  @objc(removeLanguages:) @NSManaged dynamic public func removeFromLanguages(_ values: Foundation.NSSet)
}
extension MapstedCore.BuildingDO {
  @objc(addLevelsObject:) @NSManaged dynamic public func addToLevels(_ value: MapstedCore.LevelDO)
  @objc(removeLevelsObject:) @NSManaged dynamic public func removeFromLevels(_ value: MapstedCore.LevelDO)
  @objc(addLevels:) @NSManaged dynamic public func addToLevels(_ values: Foundation.NSSet)
  @objc(removeLevels:) @NSManaged dynamic public func removeFromLevels(_ values: Foundation.NSSet)
}
extension MapstedCore.BuildingDO {
  @objc(addOpeningHoursObject:) @NSManaged dynamic public func addToOpeningHours(_ value: MapstedCore.EntityHoursDO)
  @objc(removeOpeningHoursObject:) @NSManaged dynamic public func removeFromOpeningHours(_ value: MapstedCore.EntityHoursDO)
  @objc(addOpeningHours:) @NSManaged dynamic public func addToOpeningHours(_ values: Foundation.NSSet)
  @objc(removeOpeningHours:) @NSManaged dynamic public func removeFromOpeningHours(_ values: Foundation.NSSet)
}
extension MapstedCore.BuildingDO {
  @objc(addSubcategoriesObject:) @NSManaged dynamic public func addToSubcategories(_ value: MapstedCore.BuildingSubcategoryDO)
  @objc(removeSubcategoriesObject:) @NSManaged dynamic public func removeFromSubcategories(_ value: MapstedCore.BuildingSubcategoryDO)
  @objc(addSubcategories:) @NSManaged dynamic public func addToSubcategories(_ values: Foundation.NSSet)
  @objc(removeSubcategories:) @NSManaged dynamic public func removeFromSubcategories(_ values: Foundation.NSSet)
}
extension MapstedCore.BuildingDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.BuildingEntitiesDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingEntitiesDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateAdded: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stores: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedCore.BuildingEntitiesDO {
  @objc(addStoresObject:) @NSManaged dynamic public func addToStores(_ value: MapstedCore.StoreDO)
  @objc(removeStoresObject:) @NSManaged dynamic public func removeFromStores(_ value: MapstedCore.StoreDO)
  @objc(addStores:) @NSManaged dynamic public func addToStores(_ values: Foundation.NSSet)
  @objc(removeStores:) @NSManaged dynamic public func removeFromStores(_ values: Foundation.NSSet)
}
extension MapstedCore.BuildingEntitiesDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.BuildingLanguageDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingLanguageDO>
  @objc @NSManaged dynamic public var categoryId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconDark: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconImage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconLight: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleLocationSet: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleLocationX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleLocationY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleRotation: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleRotationSet: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keywords: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mobileSettingFreeRotation: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shortName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var styleUseIcon: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var styleUseText: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textStyleLocationSet: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textStyleLocationX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textStyleLocationY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textStyleRotation: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var website: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofBuilding: MapstedCore.BuildingDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.BuildingLanguageDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(BuildingSubcategoryDO) public class BuildingSubcategoryDO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MapstedCore.BuildingSubcategoryDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.BuildingSubcategoryDO>
  @objc @NSManaged dynamic public var idString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nameString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofBuilding: MapstedCore.BuildingDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.BuildingSubcategoryDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.CategoryDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.CategoryDO>
  @objc @NSManaged dynamic public var categoryId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var englishName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconImageId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryLanguages: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isBranchCategoryOf: MapstedCore.PropertyCategoryDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isRootCategoryOf: MapstedCore.PropertyCategoryDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subCategories: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedCore.CategoryDO {
  @objc(addCategoryLanguagesObject:) @NSManaged dynamic public func addToCategoryLanguages(_ value: MapstedCore.CategoryLanguageDO)
  @objc(removeCategoryLanguagesObject:) @NSManaged dynamic public func removeFromCategoryLanguages(_ value: MapstedCore.CategoryLanguageDO)
  @objc(addCategoryLanguages:) @NSManaged dynamic public func addToCategoryLanguages(_ values: Foundation.NSSet)
  @objc(removeCategoryLanguages:) @NSManaged dynamic public func removeFromCategoryLanguages(_ values: Foundation.NSSet)
}
extension MapstedCore.CategoryDO {
  @objc(addSubCategoriesObject:) @NSManaged dynamic public func addToSubCategories(_ value: MapstedCore.SubCategoryDO)
  @objc(removeSubCategoriesObject:) @NSManaged dynamic public func removeFromSubCategories(_ value: MapstedCore.SubCategoryDO)
  @objc(addSubCategories:) @NSManaged dynamic public func addToSubCategories(_ values: Foundation.NSSet)
  @objc(removeSubCategories:) @NSManaged dynamic public func removeFromSubCategories(_ values: Foundation.NSSet)
}
extension MapstedCore.CategoryDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.CategoryLanguageDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.CategoryLanguageDO>
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageValue: MapstedCore.CategoryDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.CategoryLanguageDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.DestinationInstructionDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.DestinationInstructionDO>
  @objc @NSManaged dynamic public var createdDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var jsonString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
}
extension MapstedCore.DestinationInstructionDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.EntityHoursDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.EntityHoursDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closingDayOfWeek: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closingHour: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closingMinute: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isBuildingEntity: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isPropertyEntity: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingDayOfWeek: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingHour: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingMinute: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofBuilding: MapstedCore.BuildingDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.EntityHoursDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.EntityLanguage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.EntityLanguage>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nameLong: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nameShort: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
}
extension MapstedCore.EntityLanguage : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.FavoriteEntityDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.FavoriteEntityDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateCreated: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var englishName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
}
extension MapstedCore.FavoriteEntityDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.HolidayDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.HolidayDO>
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var day: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var month: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var year: Swift.Int32 {
    @objc get
    @objc set
  }
}
extension MapstedCore.HolidayDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.LevelDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.LevelDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorNumber: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var levelLanguages: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofBuilding: MapstedCore.BuildingDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.LevelDO {
  @objc(addLevelLanguagesObject:) @NSManaged dynamic public func addToLevelLanguages(_ value: MapstedCore.LevelLanguageDO)
  @objc(removeLevelLanguagesObject:) @NSManaged dynamic public func removeFromLevelLanguages(_ value: MapstedCore.LevelLanguageDO)
  @objc(addLevelLanguages:) @NSManaged dynamic public func addToLevelLanguages(_ values: Foundation.NSSet)
  @objc(removeLevelLanguages:) @NSManaged dynamic public func removeFromLevelLanguages(_ values: Foundation.NSSet)
}
extension MapstedCore.LevelDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.LevelLanguageDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.LevelLanguageDO>
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shortName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofLevel: MapstedCore.LevelDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.LevelLanguageDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.MapIconsDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.MapIconsDO>
  @objc @NSManaged dynamic public var childIconId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityType: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var size: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subEntityType: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofProperty: MapstedCore.PropertyDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.MapIconsDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.PropertyCategoryDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.PropertyCategoryDO>
  @objc @NSManaged dynamic public var imageBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var branchCategories: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rootCategories: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedCore.PropertyCategoryDO {
  @objc(addBranchCategoriesObject:) @NSManaged dynamic public func addToBranchCategories(_ value: MapstedCore.CategoryDO)
  @objc(removeBranchCategoriesObject:) @NSManaged dynamic public func removeFromBranchCategories(_ value: MapstedCore.CategoryDO)
  @objc(addBranchCategories:) @NSManaged dynamic public func addToBranchCategories(_ values: Foundation.NSSet)
  @objc(removeBranchCategories:) @NSManaged dynamic public func removeFromBranchCategories(_ values: Foundation.NSSet)
}
extension MapstedCore.PropertyCategoryDO {
  @objc(addRootCategoriesObject:) @NSManaged dynamic public func addToRootCategories(_ value: MapstedCore.CategoryDO)
  @objc(removeRootCategoriesObject:) @NSManaged dynamic public func removeFromRootCategories(_ value: MapstedCore.CategoryDO)
  @objc(addRootCategories:) @NSManaged dynamic public func addToRootCategories(_ values: Foundation.NSSet)
  @objc(removeRootCategories:) @NSManaged dynamic public func removeFromRootCategories(_ values: Foundation.NSSet)
}
extension MapstedCore.PropertyCategoryDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.PropertyCoverImagesDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.PropertyCoverImagesDO>
  @objc @NSManaged dynamic public var imageId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofProperty: MapstedCore.PropertyDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.PropertyCoverImagesDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.PropertyDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.PropertyDO>
  @objc @NSManaged dynamic public var addressCity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressCountry: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressFull: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressPostal: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressProvince: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var addressStreet: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroidType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroidX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroidY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centroidZ: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconImageId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneOffset: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var website: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var buildings: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var coverImages: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mapIcons: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyLanguages: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var workingPeriods: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedCore.PropertyDO {
  @objc(addBuildingsObject:) @NSManaged dynamic public func addToBuildings(_ value: MapstedCore.BuildingDO)
  @objc(removeBuildingsObject:) @NSManaged dynamic public func removeFromBuildings(_ value: MapstedCore.BuildingDO)
  @objc(addBuildings:) @NSManaged dynamic public func addToBuildings(_ values: Foundation.NSSet)
  @objc(removeBuildings:) @NSManaged dynamic public func removeFromBuildings(_ values: Foundation.NSSet)
}
extension MapstedCore.PropertyDO {
  @objc(addCoverImagesObject:) @NSManaged dynamic public func addToCoverImages(_ value: MapstedCore.PropertyCoverImagesDO)
  @objc(removeCoverImagesObject:) @NSManaged dynamic public func removeFromCoverImages(_ value: MapstedCore.PropertyCoverImagesDO)
  @objc(addCoverImages:) @NSManaged dynamic public func addToCoverImages(_ values: Foundation.NSSet)
  @objc(removeCoverImages:) @NSManaged dynamic public func removeFromCoverImages(_ values: Foundation.NSSet)
}
extension MapstedCore.PropertyDO {
  @objc(addMapIconsObject:) @NSManaged dynamic public func addToMapIcons(_ value: MapstedCore.MapIconsDO)
  @objc(removeMapIconsObject:) @NSManaged dynamic public func removeFromMapIcons(_ value: MapstedCore.MapIconsDO)
  @objc(addMapIcons:) @NSManaged dynamic public func addToMapIcons(_ values: Foundation.NSSet)
  @objc(removeMapIcons:) @NSManaged dynamic public func removeFromMapIcons(_ values: Foundation.NSSet)
}
extension MapstedCore.PropertyDO {
  @objc(addPropertyLanguagesObject:) @NSManaged dynamic public func addToPropertyLanguages(_ value: MapstedCore.PropertyLanguageDO)
  @objc(removePropertyLanguagesObject:) @NSManaged dynamic public func removeFromPropertyLanguages(_ value: MapstedCore.PropertyLanguageDO)
  @objc(addPropertyLanguages:) @NSManaged dynamic public func addToPropertyLanguages(_ values: Foundation.NSSet)
  @objc(removePropertyLanguages:) @NSManaged dynamic public func removeFromPropertyLanguages(_ values: Foundation.NSSet)
}
extension MapstedCore.PropertyDO {
  @objc(addWorkingPeriodsObject:) @NSManaged dynamic public func addToWorkingPeriods(_ value: MapstedCore.WorkingPeriodDO)
  @objc(removeWorkingPeriodsObject:) @NSManaged dynamic public func removeFromWorkingPeriods(_ value: MapstedCore.WorkingPeriodDO)
  @objc(addWorkingPeriods:) @NSManaged dynamic public func addToWorkingPeriods(_ values: Foundation.NSSet)
  @objc(removeWorkingPeriods:) @NSManaged dynamic public func removeFromWorkingPeriods(_ values: Foundation.NSSet)
}
extension MapstedCore.PropertyDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.PropertyLanguageDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.PropertyLanguageDO>
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconImage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phoneNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shortName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var website: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofProperty: MapstedCore.PropertyDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.PropertyLanguageDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.RecentEntityDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.RecentEntityDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var campaignId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateCreated: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var englishName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSearch: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
}
extension MapstedCore.RecentEntityDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.StoreDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.StoreDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var englishName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languages: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofBuilding: MapstedCore.BuildingEntitiesDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingHours: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subcategories: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedCore.StoreDO {
  @objc(addLanguagesObject:) @NSManaged dynamic public func addToLanguages(_ value: MapstedCore.StoreLanguageDO)
  @objc(removeLanguagesObject:) @NSManaged dynamic public func removeFromLanguages(_ value: MapstedCore.StoreLanguageDO)
  @objc(addLanguages:) @NSManaged dynamic public func addToLanguages(_ values: Foundation.NSSet)
  @objc(removeLanguages:) @NSManaged dynamic public func removeFromLanguages(_ values: Foundation.NSSet)
}
extension MapstedCore.StoreDO {
  @objc(addOpeningHoursObject:) @NSManaged dynamic public func addToOpeningHours(_ value: MapstedCore.StoreHoursDO)
  @objc(removeOpeningHoursObject:) @NSManaged dynamic public func removeFromOpeningHours(_ value: MapstedCore.StoreHoursDO)
  @objc(addOpeningHours:) @NSManaged dynamic public func addToOpeningHours(_ values: Foundation.NSSet)
  @objc(removeOpeningHours:) @NSManaged dynamic public func removeFromOpeningHours(_ values: Foundation.NSSet)
}
extension MapstedCore.StoreDO {
  @objc(addSubcategoriesObject:) @NSManaged dynamic public func addToSubcategories(_ value: MapstedCore.StoreSubcategoryDO)
  @objc(removeSubcategoriesObject:) @NSManaged dynamic public func removeFromSubcategories(_ value: MapstedCore.StoreSubcategoryDO)
  @objc(addSubcategories:) @NSManaged dynamic public func addToSubcategories(_ values: Foundation.NSSet)
  @objc(removeSubcategories:) @NSManaged dynamic public func removeFromSubcategories(_ values: Foundation.NSSet)
}
extension MapstedCore.StoreDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.StoreHoursDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.StoreHoursDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closingDayOfWeek: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closingHour: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closingMinute: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingDayOfWeek: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingHour: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingMinute: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofStore: MapstedCore.StoreDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.StoreHoursDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.StoreLanguageDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.StoreLanguageDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconImage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleLocationSet: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleLocationX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleLocationY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleRotation: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleRotationSet: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconStyleSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var keywords: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mobileSettingFreeRotation: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shortName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var styleUseIcon: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var styleUseText: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textStyleLocationSet: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textStyleLocationX: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textStyleLocationY: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var textStyleRotation: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var website: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofStore: MapstedCore.StoreDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.StoreLanguageDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.StoreSubcategoryDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.StoreSubcategoryDO>
  @objc @NSManaged dynamic public var idString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nameString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofStore: MapstedCore.StoreDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.StoreSubcategoryDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.SubCategoryDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.SubCategoryDO>
  @objc @NSManaged dynamic public var categoryId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parentCategory: MapstedCore.CategoryDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.SubCategoryDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.WorkingPeriodDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedCore.WorkingPeriodDO>
  @objc @NSManaged dynamic public var closingDayOfWeek: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closingHour: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var closingMinute: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingDayOfWeek: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingHour: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var openingMinute: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofProperty: MapstedCore.PropertyDO? {
    @objc get
    @objc set
  }
}
extension MapstedCore.WorkingPeriodDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedCore.CMSCategoryType : Swift.Equatable {}
extension MapstedCore.CMSCategoryType : Swift.Hashable {}
extension MapstedCore.HTTPMethod : Swift.Equatable {}
extension MapstedCore.HTTPMethod : Swift.Hashable {}
extension MapstedCore.HTTPMethod : Swift.RawRepresentable {}
extension MapstedCore.URLEncoding.Destination : Swift.Equatable {}
extension MapstedCore.URLEncoding.Destination : Swift.Hashable {}
extension MapstedCore.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension MapstedCore.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension MapstedCore.URLEncoding.BoolEncoding : Swift.Equatable {}
extension MapstedCore.URLEncoding.BoolEncoding : Swift.Hashable {}
extension MapstedCore.ValidationType : Swift.Equatable {}
extension MapstedCore.ValidationType : Swift.Hashable {}
extension MapstedCore.ValidationType : Swift.RawRepresentable {}
extension MapstedCore.CategoryType : Swift.Equatable {}
extension MapstedCore.CategoryType : Swift.Hashable {}
extension MapstedCore.MapEntityType : Swift.Equatable {}
extension MapstedCore.MapEntityType : Swift.Hashable {}
extension MapstedCore.MNCoreNotificationType : Swift.Equatable {}
extension MapstedCore.MNCoreNotificationType : Swift.Hashable {}
extension MapstedCore.MNCoreNotificationType : Swift.RawRepresentable {}
extension MapstedCore.MNCoreNotificationManager.objKey : Swift.Equatable {}
extension MapstedCore.MNCoreNotificationManager.objKey : Swift.Hashable {}
extension MapstedCore.MNCoreNotificationManager.objKey : Swift.RawRepresentable {}
extension MapstedCore.DeepLinkConcern : Swift.Equatable {}
extension MapstedCore.DeepLinkConcern : Swift.Hashable {}
extension MapstedCore.DeepLinkParameter : Swift.Equatable {}
extension MapstedCore.DeepLinkParameter : Swift.Hashable {}
extension MapstedCore.FileSentType : Swift.Equatable {}
extension MapstedCore.FileSentType : Swift.Hashable {}
extension MapstedCore.FileSentType : Swift.RawRepresentable {}
extension MapstedCore.PropertyAction : Swift.Equatable {}
extension MapstedCore.PropertyAction : Swift.Hashable {}
extension MapstedCore.MNTypeMeta.imageType : Swift.Equatable {}
extension MapstedCore.MNTypeMeta.imageType : Swift.Hashable {}
extension MapstedCore.MNTypeMeta.imageType : Swift.RawRepresentable {}
extension MapstedCore.MNActivityManager.ActivityType : Swift.Equatable {}
extension MapstedCore.MNActivityManager.ActivityType : Swift.Hashable {}
extension MapstedCore.MNActivityManager.ActivityType : Swift.RawRepresentable {}
extension MapstedCore.MNPrint.Module : Swift.Equatable {}
extension MapstedCore.MNPrint.Module : Swift.Hashable {}
extension MapstedCore.MNPrint.Module : Swift.RawRepresentable {}
extension MapstedCore.MNPrint.Level : Swift.Equatable {}
extension MapstedCore.MNPrint.Level : Swift.Hashable {}
extension MapstedCore.MNPrint.Level : Swift.RawRepresentable {}
extension MapstedCore.MNNetworkRetryType : Swift.Equatable {}
extension MapstedCore.MNNetworkRetryType : Swift.Hashable {}
extension MapstedCore.MNNetworkRetryType : Swift.RawRepresentable {}
extension MapstedCore.CMS.Section : Swift.Equatable {}
extension MapstedCore.CMS.Section : Swift.Hashable {}
extension MapstedCore.EnumDataType : Swift.Equatable {}
extension MapstedCore.EnumDataType : Swift.Hashable {}
extension MapstedCore.EnumDataType : Swift.RawRepresentable {}
extension MapstedCore.IsReachable : Swift.Equatable {}
extension MapstedCore.IsReachable : Swift.Hashable {}
extension MapstedCore.IsReachable : Swift.RawRepresentable {}
extension MapstedCore.MNRequestType : Swift.Equatable {}
extension MapstedCore.MNRequestType : Swift.Hashable {}
extension MapstedCore.MNRequestType : Swift.RawRepresentable {}
extension MapstedCore.iCategoryType : Swift.Equatable {}
extension MapstedCore.iCategoryType : Swift.Hashable {}
extension MapstedCore.SocialMedium : Swift.Equatable {}
extension MapstedCore.SocialMedium : Swift.Hashable {}
extension MapstedCore.SocialMedium : Swift.RawRepresentable {}
extension MapstedCore.DownloadStatus : Swift.Equatable {}
extension MapstedCore.DownloadStatus : Swift.Hashable {}
extension MapstedCore.MapstedCoreSearchApi.StringSearchType : Swift.Equatable {}
extension MapstedCore.MapstedCoreSearchApi.StringSearchType : Swift.Hashable {}
extension MapstedCore.MapstedCoreSearchApi.StringSearchType : Swift.RawRepresentable {}
extension MapstedCore.MapstedCoreSearchApi.SearchableItemType : Swift.Equatable {}
extension MapstedCore.MapstedCoreSearchApi.SearchableItemType : Swift.Hashable {}
extension MapstedCore.MapstedCoreSearchApi.SearchableItemType : Swift.RawRepresentable {}
extension MapstedCore.MapstedCoreSearchApi.SortType : Swift.Equatable {}
extension MapstedCore.MapstedCoreSearchApi.SortType : Swift.Hashable {}
extension MapstedCore.MapstedCoreSearchApi.SortType : Swift.RawRepresentable {}
extension MapstedCore.MapstedCoreSearchApi.StringDistanceMetric : Swift.Equatable {}
extension MapstedCore.MapstedCoreSearchApi.StringDistanceMetric : Swift.Hashable {}
extension MapstedCore.MapstedCoreSearchApi.StringDistanceMetric : Swift.RawRepresentable {}
extension MapstedCore.MNSettingUtils.Key : Swift.Equatable {}
extension MapstedCore.MNSettingUtils.Key : Swift.Hashable {}
extension MapstedCore.MNSettingUtils.Key : Swift.RawRepresentable {}
extension MapstedCore.MNSettingUtils.DistanceUnit : Swift.Equatable {}
extension MapstedCore.MNSettingUtils.DistanceUnit : Swift.Hashable {}
extension MapstedCore.MNSettingUtils.DistanceUnit : Swift.RawRepresentable {}
extension MapstedCore.MNSettingUtils.Environment : Swift.Equatable {}
extension MapstedCore.MNSettingUtils.Environment : Swift.Hashable {}
